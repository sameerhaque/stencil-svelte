/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "./stencil-public-runtime";
import { EventConfiguration } from "./core/events/domain/EventConfiguration";
import { Article } from "./components/aritcle-list/article";
import { ItemConfiguration } from "./core/components/item/domain/ItemConfiguration";
import { ModalOptions } from "./components/modal/domain/ModalOptions";
import { NavItemTypeEnum } from "./core/nav/domain/NavItemTypeEnum";
import { SearchSuggestion } from "./core/search/SearchSuggestion";
import { SearchResult } from "./components/search-results/search-result";
import { ITreeStructure, Treeitem } from "./core/components/treeview/Treeitem";
export namespace Components {
    interface AccordionExample {
    }
    interface AdExample {
    }
    interface ArticleListExample {
    }
    interface BlogExample {
    }
    interface BlogFeatureArticlesExample {
    }
    interface BlogResultsExample {
    }
    interface BreadcrumbExample {
    }
    interface ButtonLink {
        "ariaDescribedByText": string;
        "ariaLabel": string;
        "buttonId": string;
        "classNames": string;
        "href": string;
        "target": string;
    }
    interface ButtonLinkExample {
    }
    interface ButtonLinkGroup {
    }
    interface CommonStylesExample {
    }
    interface ConnectOffersExample {
    }
    interface CtaHighlightExample {
    }
    interface CtaReminderExample {
    }
    interface DemoApp {
    }
    interface DemoAppHome {
    }
    interface DropdownExample {
    }
    interface FaqBlockExample {
    }
    interface FaqFilterSliderExample {
    }
    interface FaqPaginationExample {
    }
    interface FeatureLeftExample {
        "viewport": string;
    }
    interface FeatureRightExample {
        "viewport": string;
    }
    interface FooterExample {
    }
    interface FormExample {
    }
    interface HeaderExample {
    }
    interface HeroExample {
    }
    interface IconCopyExample {
    }
    interface ImageExample {
    }
    interface ImageIconExample {
    }
    interface LegalComponent {
    }
    interface LinkExample {
    }
    interface ModalExample {
    }
    interface MultiColumnExample {
    }
    interface PageNotFoundExample {
    }
    interface PanelExample {
    }
    interface RecaptchaExample {
    }
    interface ResponsiveImagesExample {
    }
    interface SearchComboboxExample {
    }
    interface SearchResultsExample {
    }
    interface SkiptomainExample {
        "mainContentId": string;
    }
    interface SntAccordion {
        "collapse": () => Promise<void>;
        "expand": () => Promise<void>;
        "expanded": boolean;
        "isCollapsed": () => Promise<boolean>;
        "isExpanded": () => Promise<boolean>;
        "toggle": () => Promise<void>;
    }
    interface SntAccordionBuilder {
    }
    interface SntAccordionGroup {
        "addAccordion": (accordion: HTMLSntAccordionElement) => Promise<void>;
        "collapseAll": () => Promise<void>;
        "expandAll": () => Promise<void>;
        "multiExpand": boolean;
    }
    interface SntAccordionGroupBuilder {
    }
    interface SntActionButton {
        "actionData": string;
        "actionReference": string;
        "buttonId": string;
        "getEventConfiguration": () => Promise<EventConfiguration>;
        "iconClassName": string;
        "linkTitle": string;
        "styleClasses": string;
    }
    interface SntActionLink {
        "actionData": string;
        "actionReference": string;
        "getEventConfiguration": () => Promise<EventConfiguration>;
        "iconClassName": string;
        "linkId": string;
        "linkTitle": string;
        "styleClasses": string;
    }
    interface SntAd {
        "actionData"?: string;
        "actionReference"?: string;
        "ariaLabel"?: string;
        "buttonLabel"?: string;
        "href"?: string;
        "iconSources"?: string;
        "linkLabel"?: string;
        "logoSources"?: string;
        "styleClasses": string;
        "target"?: string;
        "titleString"?: string;
    }
    interface SntAlert {
        "animatable": boolean;
        "dismiss": () => Promise<void>;
        "dismissible": boolean;
        "explorerOnly": string;
        "type": string;
    }
    interface SntArticleLink {
        "ariaLabel": string;
        "copy": string;
        "hiddenTitle": string;
        "href": string;
    }
    interface SntArticleList {
        "articles": Article[];
        "articlesJson": string;
        "heading": string;
    }
    interface SntBackdrop {
        /**
          * If `true`, the backdroo will stop propagation on tap
         */
        "stopPropagation": Boolean;
        /**
          * If `true`, the backdrop can be clicked and will emit `ionBackdropTap` event.
         */
        "tappable": Boolean;
    }
    interface SntBlog {
        "blogLink": string;
        "imgAltText": string;
        "imgSrc": string;
        "imgSrcSet": string;
        "openInNewWindow": boolean;
        "tagText": string;
        "timeToRead": string;
        "titleText": string;
    }
    interface SntBlogFeatureArticles {
    }
    interface SntBlogInfo {
        "accessibilityText": string;
        "blogLink": string;
        "publishedTime": string;
        "timeToRead": string;
        "titleText": string;
    }
    interface SntBlogResults {
        "blogResultsString": string;
    }
    interface SntBreadcrumb {
        "trail": any;
    }
    interface SntButton {
        "buttonId": string;
        "hiddenTitle": string;
        "iconClassName": string;
        "styleClasses": string;
    }
    interface SntConnectOffers {
        "actionData"?: string;
        "actionReference"?: string;
        "altTag"?: string;
        "ariaLabel"?: string;
        "buttonLabel"?: string;
        "description"?: string;
        "href"?: string;
        "logoSources"?: string;
        "modalData": string;
        "offerAvailable"?: string;
        "offerTitle"?: string;
        "target"?: string;
        "titleString"?: string;
    }
    interface SntCtaHighlight {
        "actionData": string;
        "actionReference": string;
        "buttonId": string;
        "cta": string;
        "url": string;
        "urlTarget": string;
    }
    interface SntCtaReminder {
        "actionData": string;
        "actionReference": string;
        "buttonId": string;
        "linkTitle": string;
        "styleClasses": string;
        "titleString": string;
        "url": string;
        "urlTarget": string;
    }
    interface SntData {
        "data"?: string;
        "getData": () => Promise<Object>;
        "lazyLoad": boolean;
        "src"?: string;
        "type": string;
    }
    interface SntDropdown {
        "close": () => Promise<void>;
        "getIndex": () => Promise<number>;
        "getValue": () => Promise<string>;
        "isOpen": () => Promise<boolean>;
        "itemConfiguration": ItemConfiguration;
        "labelText": string;
        "name": string;
        "open": () => Promise<void>;
        "opened": boolean;
        "placeholderText": string;
        "required": boolean;
        "setIndex": (index: any) => Promise<void>;
        "setValue": (value: any) => Promise<void>;
        "toggle": () => Promise<void>;
    }
    interface SntEnhancedButton {
        "ariaLabel": string;
        "ctaText": string;
        "discountText": string;
        "href": string;
        "leftIconSources": string;
        "linkId": string;
        "rightIconSources": string;
        "styleClasses": string;
        "target": string;
    }
    interface SntEvent {
        "filters": string;
        "type": string;
    }
    interface SntFaqBlock {
        "articlesCount": string;
        "blockLink": string;
        "bodyText": string;
        "titleText": string;
    }
    interface SntFaqBlockList {
        "faqBlockList": {
        titleText: string;
        blockLink?: string;
        bodyText: string;
        articlesCount: string;
    }[];
        "menuAriaLabel": string;
    }
    interface SntFaqFilterSlider {
        "currentActive": string;
        "filterItems": string;
        "menuAriaLabel": string;
    }
    interface SntFeatureLeft {
        "blogLink": string;
        "imgAltText": string;
        "imgSrc": string;
        "imgSrcSet": string;
        "openInNewWindow": boolean;
        "tagText": string;
        "timeToRead": string;
        "titleText": string;
    }
    interface SntFeatureRight {
        "blogLink": string;
        "imgAltText": string;
        "imgSrc": string;
        "imgSrcSet": string;
        "openInNewWindow": boolean;
        "tagText": string;
        "timeToRead": string;
        "titleText": string;
    }
    interface SntFooter {
        "styleClasses": string;
    }
    interface SntForm {
        "getData": () => Promise<{ method: string; action: string; content: {}; }>;
        /**
          * Methods
         */
        "openErrorModal": (actionData: JSON, modalId: string) => Promise<void>;
        "openSuccessModal": (actionData: JSON, modalId: string) => Promise<void>;
        "reset": () => Promise<void>;
        "submitCallBackhandler": any;
        "text": string;
    }
    interface SntHeader {
        "active": boolean;
        "fixed": boolean;
        "languageJson": string;
        "mainContentId": string;
        "setActive": (active: boolean) => Promise<boolean>;
        "styleClasses": string;
        "toggleActive": (active?: boolean) => Promise<boolean>;
    }
    interface SntHero {
        "properties"?: string;
        "propertiesSrc"?: string;
    }
    interface SntIcon {
        "styleClasses": string;
    }
    interface SntIconCopy {
        "linkActionData": string;
        "linkActionReference": string;
        "linkHref": string;
        "linkId": string;
        "linkRel": string;
        "linkTarget": string;
        "linkTitle": string;
        "logoIsSet": boolean;
        "properties"?: string;
        "propertiesSrc"?: string;
        "registerViewport": (target: HTMLElement) => Promise<void>;
        "resizeEl": HTMLElement;
        "styleClasses": string;
        "titleString": string;
    }
    interface SntImage {
        "dataSrc": string;
        "height": string;
        "imgAlt": string;
        "sizes": string;
        "srcImage": string;
        "srcset": string;
        "styleClasses": string;
        "width": string;
    }
    interface SntImageColumn {
        "imageSrc": string;
        "imgAlt": string;
    }
    interface SntImageIcon {
        "imgAlt": string;
        "properties": string;
        "styleClasses": string;
    }
    interface SntLayout {
        "padding": 'none'|'top-only'|'bottom-only'|'remove-sides'|'vertical-only';
        "viewport": string;
    }
    interface SntLink {
        "ariaCurrent": string|boolean;
        "ariaLabel": string;
        "classNames": string;
        "current": boolean;
        "downloadName": string;
        "hiddenTitle": string;
        "href": string;
        "isExternal": boolean;
        "linkId": string;
        "rel": string;
        "target": string;
    }
    interface SntLogin {
        "accountDashboardUrl": string;
        "accountLoginUrl": string;
        "authed": string;
        "languageJson": string;
    }
    interface SntModal {
        "hide": () => Promise<void>;
        "isShown": () => Promise<boolean>;
        "languageString": string;
        "modalTitle": string;
        "options": ModalOptions;
        "show": () => Promise<void>;
        "shown": boolean;
        "styleClasses": string;
        "toggle": () => Promise<void>;
    }
    interface SntMultiButton {
    }
    interface SntMultiColumnMixed {
        "columnCount": string;
        "setColumns": () => Promise<void>;
        "styleClasses": string;
        "tagLastRow": (viewport: string) => Promise<void>;
    }
    interface SntNav {
        "expander": string;
        "separator": boolean;
        "styleClasses": string;
    }
    interface SntNavItem {
        "collapse": () => Promise<void>;
        "current": boolean;
        "expand": () => Promise<void>;
        "expanded": boolean;
        "href": string;
        "iconClassName": string;
        "isExternal": boolean;
        "isType": (type: NavItemTypeEnum) => Promise<boolean>;
        "linkTitle": string;
        "registerParent": (parent: HTMLSntNavItemElement) => Promise<void>;
        "setCurrent": () => Promise<void>;
        "styleClasses": string;
        "target": string;
        "toggleCurrent": () => Promise<void>;
        "toggleExpanded": () => Promise<void>;
        "unsetCurrent": () => Promise<void>;
    }
    interface SntNavbar {
        "active": boolean;
        "languageString": string;
        "styleClasses": string;
        "toggleActive": (active?: boolean) => Promise<boolean>;
        "viewport": string;
    }
    interface SntNavbarBrand {
        "href": string;
        "imgAlt": string;
        "imgSrc": string;
    }
    interface SntNavbarCollapse {
        "logoUrl": string;
        "shown": boolean;
        "toggleShown": (shown?: boolean) => Promise<boolean>;
        "viewport": string;
    }
    interface SntNavbarToggle {
        "ariaControls": string;
        "collapsed": boolean;
        "languageString": string;
        "toggleCollapsed": (collapsed?: boolean) => Promise<boolean>;
    }
    interface SntPagination {
        "curr": number;
        "nextLinkLang": string;
        "pageNumAriaLang": string;
        "pageNumLang": string;
        "paginationNavLang": string;
        "prevLinkLang": string;
        "setPageNumber": (pageNum: number, emitEvent?: boolean) => Promise<void>;
        "totalPages": number;
    }
    interface SntPane {
        "animated": boolean;
        "collapsed": boolean;
        "styleClasses": string;
        "toggleCollapsed": (collapsed?: boolean) => Promise<boolean>;
    }
    interface SntPanel {
    }
    interface SntRecaptcha {
        "language": string;
        "reset": () => Promise<void>;
        "sitekey": string;
    }
    interface SntSearchBar {
        "active": boolean;
        "languageJson": string;
        "styleClasses": string;
        "toggleActive": (active?: boolean) => Promise<boolean>;
    }
    interface SntSearchCombobox {
        /**
          * Prop Lifecycle Events
         */
        "activeIndex": number;
        "ariaLabel": string;
        "ariaLabelledby": string;
        /**
          * Public Properties API
         */
        "autoComplete": boolean;
        "getInputElement": () => Promise<HTMLInputElement>;
        "languageJson": string;
        "languageString": string;
        "padding": 'none' | 'top-only' | 'bottom-only' | 'remove-sides' | 'vertical-only';
        "searchFunctionRef": string;
        /**
          * Public Methods API
         */
        "setFocus": () => Promise<void>;
        "setSearchSuggestions": (suggestions: Array<SearchSuggestion>) => Promise<void>;
        "value"?: string | null;
    }
    interface SntSearchPanel {
        "active": boolean;
        "languageJson": string;
        "styleClasses": string;
        "toggleActive": (active?: boolean) => Promise<boolean>;
    }
    interface SntSearchResult {
        "searchResult": SearchResult;
    }
    interface SntSearchResultList {
        "noResultMsg": string;
        "searchResultListJson": string;
        "separator": boolean;
    }
    interface SntSearchTypeahead {
        "languageJson": string;
        "searchComboboxId": string;
    }
    interface SntShoppingCart {
        "cartValue": string;
    }
    interface SntSkipToMain {
        "ariaLabel": string;
        "linkText": string;
        "mainContentId": string;
    }
    interface SntSourceLink {
        "ariaLabel": string;
        "href": string;
        "rel": string;
        "target": string;
    }
    interface SntSourceList {
        "panelId": string;
        "sourceHeading": string;
    }
    interface SntTabs {
    }
    interface SntTabsExample {
    }
    interface SntThreeColumn {
        "styleClasses": string;
    }
    interface SntThreeColumnMixed {
        "styleClasses": string;
    }
    interface SntTip {
        "iconPath": string;
    }
    interface SntTitle {
        "clampLines": number;
        "clampTitle": (clampLines?: number) => Promise<void>;
        "setTitle": (title: string) => Promise<void>;
        "titleType": string;
        "truncationString": string;
    }
    interface SntTitleCopy {
        "styleClasses": string;
        "titleString": string;
    }
    interface SntToggle {
    }
    interface SntTreeview {
        "findNodeByProperty": (key: string, value: string) => Promise<Treeitem>;
        /**
          * Public Methods API
         */
        "getTreeitems": () => Promise<Array<Treeitem>>;
        "selectNodeByUrlOrKey": (url: string, childKey?: string, emitEvent?: boolean) => Promise<void>;
        /**
          * Public Properties API
         */
        "structure": string;
        "updateExpandedTreeitems": (treeitems: Array<Treeitem>, targetNodes: Array<Treeitem>, expanded?: boolean | undefined) => Promise<Array<Treeitem>>;
        "updateFocusedTreeitems": (treeitems: Array<Treeitem>, targetNodes: Array<Treeitem>, focused?: boolean | undefined) => Promise<Array<Treeitem>>;
        "updateSelectedTreeitems": (treeitems: Array<Treeitem>, targetNodes: Array<Treeitem>, selected?: boolean | undefined) => Promise<Array<Treeitem>>;
        "updateTreeView": (structure: string) => Promise<void>;
        "updateVisibleTreeitems": (treeitems: Array<Treeitem>, targetNodes: Array<Treeitem>, visible?: boolean | undefined) => Promise<Array<Treeitem>>;
    }
    interface SntTwoColumn {
        "styleClasses": string;
    }
    interface SntTwoColumnFeature {
        "copyText": string;
        "imageAltText": string;
        "imagePath": string;
        "imagePosition": string;
        "linkTitle": string;
        "linkUrl": string;
        "openLinkInNewWindow": boolean;
        "primaryButtonAction": string;
        "primaryButtonData": string;
        "primaryButtonText": string;
        "properties"?: string;
        "secondaryButtonAction": string;
        "secondaryButtonData": string;
        "secondaryButtonText": string;
        "titleString": string;
    }
    interface SntVerticalTabs {
    }
    interface SntVideo {
        "headline": string;
        "oembedUrl": string;
        "playUrl": string;
        "shareUrl": string;
        "transcriptSummaryClose": string;
        "transcriptSummaryOpen": string;
    }
    interface SntViewport {
        "devices": string;
        "height": string;
        "name": string;
        "spacing": string;
    }
    interface SntWysiwyg {
    }
    interface SourceListExample {
    }
    interface TestimonialExample {
    }
    interface TestimonialQuote {
        "containerId": string;
        "fill": string;
        "from": string;
        "headline": string;
    }
    interface TestimonialsGroup {
        "cycleType": string | boolean;
        "groupHeadline": string;
        "groupId": string;
        "indicatorSelector": string;
        "next": () => Promise<void>;
        "nextSelector": string;
        "onHide": (index?: number) => Promise<void>;
        "onShow": (index?: number) => Promise<void>;
        "prev": () => Promise<void>;
        "prevSelector": string;
        "ride": boolean;
        "selected": number;
        "slideSelector": string;
        "wrap": boolean;
    }
    interface ThreeColumnExample {
    }
    interface ThreeColumnMixedExample {
    }
    interface TipExample {
    }
    interface TitleCopyExample {
    }
    interface TitleExample {
    }
    interface TreeviewExample {
    }
    interface TwoColumnExample {
    }
    interface TwoColumnFeatureExample {
    }
    interface VerticalTabExample {
    }
    interface VideoExample {
    }
}
declare global {
    interface HTMLAccordionExampleElement extends Components.AccordionExample, HTMLStencilElement {
    }
    var HTMLAccordionExampleElement: {
        prototype: HTMLAccordionExampleElement;
        new (): HTMLAccordionExampleElement;
    };
    interface HTMLAdExampleElement extends Components.AdExample, HTMLStencilElement {
    }
    var HTMLAdExampleElement: {
        prototype: HTMLAdExampleElement;
        new (): HTMLAdExampleElement;
    };
    interface HTMLArticleListExampleElement extends Components.ArticleListExample, HTMLStencilElement {
    }
    var HTMLArticleListExampleElement: {
        prototype: HTMLArticleListExampleElement;
        new (): HTMLArticleListExampleElement;
    };
    interface HTMLBlogExampleElement extends Components.BlogExample, HTMLStencilElement {
    }
    var HTMLBlogExampleElement: {
        prototype: HTMLBlogExampleElement;
        new (): HTMLBlogExampleElement;
    };
    interface HTMLBlogFeatureArticlesExampleElement extends Components.BlogFeatureArticlesExample, HTMLStencilElement {
    }
    var HTMLBlogFeatureArticlesExampleElement: {
        prototype: HTMLBlogFeatureArticlesExampleElement;
        new (): HTMLBlogFeatureArticlesExampleElement;
    };
    interface HTMLBlogResultsExampleElement extends Components.BlogResultsExample, HTMLStencilElement {
    }
    var HTMLBlogResultsExampleElement: {
        prototype: HTMLBlogResultsExampleElement;
        new (): HTMLBlogResultsExampleElement;
    };
    interface HTMLBreadcrumbExampleElement extends Components.BreadcrumbExample, HTMLStencilElement {
    }
    var HTMLBreadcrumbExampleElement: {
        prototype: HTMLBreadcrumbExampleElement;
        new (): HTMLBreadcrumbExampleElement;
    };
    interface HTMLButtonLinkElement extends Components.ButtonLink, HTMLStencilElement {
    }
    var HTMLButtonLinkElement: {
        prototype: HTMLButtonLinkElement;
        new (): HTMLButtonLinkElement;
    };
    interface HTMLButtonLinkExampleElement extends Components.ButtonLinkExample, HTMLStencilElement {
    }
    var HTMLButtonLinkExampleElement: {
        prototype: HTMLButtonLinkExampleElement;
        new (): HTMLButtonLinkExampleElement;
    };
    interface HTMLButtonLinkGroupElement extends Components.ButtonLinkGroup, HTMLStencilElement {
    }
    var HTMLButtonLinkGroupElement: {
        prototype: HTMLButtonLinkGroupElement;
        new (): HTMLButtonLinkGroupElement;
    };
    interface HTMLCommonStylesExampleElement extends Components.CommonStylesExample, HTMLStencilElement {
    }
    var HTMLCommonStylesExampleElement: {
        prototype: HTMLCommonStylesExampleElement;
        new (): HTMLCommonStylesExampleElement;
    };
    interface HTMLConnectOffersExampleElement extends Components.ConnectOffersExample, HTMLStencilElement {
    }
    var HTMLConnectOffersExampleElement: {
        prototype: HTMLConnectOffersExampleElement;
        new (): HTMLConnectOffersExampleElement;
    };
    interface HTMLCtaHighlightExampleElement extends Components.CtaHighlightExample, HTMLStencilElement {
    }
    var HTMLCtaHighlightExampleElement: {
        prototype: HTMLCtaHighlightExampleElement;
        new (): HTMLCtaHighlightExampleElement;
    };
    interface HTMLCtaReminderExampleElement extends Components.CtaReminderExample, HTMLStencilElement {
    }
    var HTMLCtaReminderExampleElement: {
        prototype: HTMLCtaReminderExampleElement;
        new (): HTMLCtaReminderExampleElement;
    };
    interface HTMLDemoAppElement extends Components.DemoApp, HTMLStencilElement {
    }
    var HTMLDemoAppElement: {
        prototype: HTMLDemoAppElement;
        new (): HTMLDemoAppElement;
    };
    interface HTMLDemoAppHomeElement extends Components.DemoAppHome, HTMLStencilElement {
    }
    var HTMLDemoAppHomeElement: {
        prototype: HTMLDemoAppHomeElement;
        new (): HTMLDemoAppHomeElement;
    };
    interface HTMLDropdownExampleElement extends Components.DropdownExample, HTMLStencilElement {
    }
    var HTMLDropdownExampleElement: {
        prototype: HTMLDropdownExampleElement;
        new (): HTMLDropdownExampleElement;
    };
    interface HTMLFaqBlockExampleElement extends Components.FaqBlockExample, HTMLStencilElement {
    }
    var HTMLFaqBlockExampleElement: {
        prototype: HTMLFaqBlockExampleElement;
        new (): HTMLFaqBlockExampleElement;
    };
    interface HTMLFaqFilterSliderExampleElement extends Components.FaqFilterSliderExample, HTMLStencilElement {
    }
    var HTMLFaqFilterSliderExampleElement: {
        prototype: HTMLFaqFilterSliderExampleElement;
        new (): HTMLFaqFilterSliderExampleElement;
    };
    interface HTMLFaqPaginationExampleElement extends Components.FaqPaginationExample, HTMLStencilElement {
    }
    var HTMLFaqPaginationExampleElement: {
        prototype: HTMLFaqPaginationExampleElement;
        new (): HTMLFaqPaginationExampleElement;
    };
    interface HTMLFeatureLeftExampleElement extends Components.FeatureLeftExample, HTMLStencilElement {
    }
    var HTMLFeatureLeftExampleElement: {
        prototype: HTMLFeatureLeftExampleElement;
        new (): HTMLFeatureLeftExampleElement;
    };
    interface HTMLFeatureRightExampleElement extends Components.FeatureRightExample, HTMLStencilElement {
    }
    var HTMLFeatureRightExampleElement: {
        prototype: HTMLFeatureRightExampleElement;
        new (): HTMLFeatureRightExampleElement;
    };
    interface HTMLFooterExampleElement extends Components.FooterExample, HTMLStencilElement {
    }
    var HTMLFooterExampleElement: {
        prototype: HTMLFooterExampleElement;
        new (): HTMLFooterExampleElement;
    };
    interface HTMLFormExampleElement extends Components.FormExample, HTMLStencilElement {
    }
    var HTMLFormExampleElement: {
        prototype: HTMLFormExampleElement;
        new (): HTMLFormExampleElement;
    };
    interface HTMLHeaderExampleElement extends Components.HeaderExample, HTMLStencilElement {
    }
    var HTMLHeaderExampleElement: {
        prototype: HTMLHeaderExampleElement;
        new (): HTMLHeaderExampleElement;
    };
    interface HTMLHeroExampleElement extends Components.HeroExample, HTMLStencilElement {
    }
    var HTMLHeroExampleElement: {
        prototype: HTMLHeroExampleElement;
        new (): HTMLHeroExampleElement;
    };
    interface HTMLIconCopyExampleElement extends Components.IconCopyExample, HTMLStencilElement {
    }
    var HTMLIconCopyExampleElement: {
        prototype: HTMLIconCopyExampleElement;
        new (): HTMLIconCopyExampleElement;
    };
    interface HTMLImageExampleElement extends Components.ImageExample, HTMLStencilElement {
    }
    var HTMLImageExampleElement: {
        prototype: HTMLImageExampleElement;
        new (): HTMLImageExampleElement;
    };
    interface HTMLImageIconExampleElement extends Components.ImageIconExample, HTMLStencilElement {
    }
    var HTMLImageIconExampleElement: {
        prototype: HTMLImageIconExampleElement;
        new (): HTMLImageIconExampleElement;
    };
    interface HTMLLegalComponentElement extends Components.LegalComponent, HTMLStencilElement {
    }
    var HTMLLegalComponentElement: {
        prototype: HTMLLegalComponentElement;
        new (): HTMLLegalComponentElement;
    };
    interface HTMLLinkExampleElement extends Components.LinkExample, HTMLStencilElement {
    }
    var HTMLLinkExampleElement: {
        prototype: HTMLLinkExampleElement;
        new (): HTMLLinkExampleElement;
    };
    interface HTMLModalExampleElement extends Components.ModalExample, HTMLStencilElement {
    }
    var HTMLModalExampleElement: {
        prototype: HTMLModalExampleElement;
        new (): HTMLModalExampleElement;
    };
    interface HTMLMultiColumnExampleElement extends Components.MultiColumnExample, HTMLStencilElement {
    }
    var HTMLMultiColumnExampleElement: {
        prototype: HTMLMultiColumnExampleElement;
        new (): HTMLMultiColumnExampleElement;
    };
    interface HTMLPageNotFoundExampleElement extends Components.PageNotFoundExample, HTMLStencilElement {
    }
    var HTMLPageNotFoundExampleElement: {
        prototype: HTMLPageNotFoundExampleElement;
        new (): HTMLPageNotFoundExampleElement;
    };
    interface HTMLPanelExampleElement extends Components.PanelExample, HTMLStencilElement {
    }
    var HTMLPanelExampleElement: {
        prototype: HTMLPanelExampleElement;
        new (): HTMLPanelExampleElement;
    };
    interface HTMLRecaptchaExampleElement extends Components.RecaptchaExample, HTMLStencilElement {
    }
    var HTMLRecaptchaExampleElement: {
        prototype: HTMLRecaptchaExampleElement;
        new (): HTMLRecaptchaExampleElement;
    };
    interface HTMLResponsiveImagesExampleElement extends Components.ResponsiveImagesExample, HTMLStencilElement {
    }
    var HTMLResponsiveImagesExampleElement: {
        prototype: HTMLResponsiveImagesExampleElement;
        new (): HTMLResponsiveImagesExampleElement;
    };
    interface HTMLSearchComboboxExampleElement extends Components.SearchComboboxExample, HTMLStencilElement {
    }
    var HTMLSearchComboboxExampleElement: {
        prototype: HTMLSearchComboboxExampleElement;
        new (): HTMLSearchComboboxExampleElement;
    };
    interface HTMLSearchResultsExampleElement extends Components.SearchResultsExample, HTMLStencilElement {
    }
    var HTMLSearchResultsExampleElement: {
        prototype: HTMLSearchResultsExampleElement;
        new (): HTMLSearchResultsExampleElement;
    };
    interface HTMLSkiptomainExampleElement extends Components.SkiptomainExample, HTMLStencilElement {
    }
    var HTMLSkiptomainExampleElement: {
        prototype: HTMLSkiptomainExampleElement;
        new (): HTMLSkiptomainExampleElement;
    };
    interface HTMLSntAccordionElement extends Components.SntAccordion, HTMLStencilElement {
    }
    var HTMLSntAccordionElement: {
        prototype: HTMLSntAccordionElement;
        new (): HTMLSntAccordionElement;
    };
    interface HTMLSntAccordionBuilderElement extends Components.SntAccordionBuilder, HTMLStencilElement {
    }
    var HTMLSntAccordionBuilderElement: {
        prototype: HTMLSntAccordionBuilderElement;
        new (): HTMLSntAccordionBuilderElement;
    };
    interface HTMLSntAccordionGroupElement extends Components.SntAccordionGroup, HTMLStencilElement {
    }
    var HTMLSntAccordionGroupElement: {
        prototype: HTMLSntAccordionGroupElement;
        new (): HTMLSntAccordionGroupElement;
    };
    interface HTMLSntAccordionGroupBuilderElement extends Components.SntAccordionGroupBuilder, HTMLStencilElement {
    }
    var HTMLSntAccordionGroupBuilderElement: {
        prototype: HTMLSntAccordionGroupBuilderElement;
        new (): HTMLSntAccordionGroupBuilderElement;
    };
    interface HTMLSntActionButtonElement extends Components.SntActionButton, HTMLStencilElement {
    }
    var HTMLSntActionButtonElement: {
        prototype: HTMLSntActionButtonElement;
        new (): HTMLSntActionButtonElement;
    };
    interface HTMLSntActionLinkElement extends Components.SntActionLink, HTMLStencilElement {
    }
    var HTMLSntActionLinkElement: {
        prototype: HTMLSntActionLinkElement;
        new (): HTMLSntActionLinkElement;
    };
    interface HTMLSntAdElement extends Components.SntAd, HTMLStencilElement {
    }
    var HTMLSntAdElement: {
        prototype: HTMLSntAdElement;
        new (): HTMLSntAdElement;
    };
    interface HTMLSntAlertElement extends Components.SntAlert, HTMLStencilElement {
    }
    var HTMLSntAlertElement: {
        prototype: HTMLSntAlertElement;
        new (): HTMLSntAlertElement;
    };
    interface HTMLSntArticleLinkElement extends Components.SntArticleLink, HTMLStencilElement {
    }
    var HTMLSntArticleLinkElement: {
        prototype: HTMLSntArticleLinkElement;
        new (): HTMLSntArticleLinkElement;
    };
    interface HTMLSntArticleListElement extends Components.SntArticleList, HTMLStencilElement {
    }
    var HTMLSntArticleListElement: {
        prototype: HTMLSntArticleListElement;
        new (): HTMLSntArticleListElement;
    };
    interface HTMLSntBackdropElement extends Components.SntBackdrop, HTMLStencilElement {
    }
    var HTMLSntBackdropElement: {
        prototype: HTMLSntBackdropElement;
        new (): HTMLSntBackdropElement;
    };
    interface HTMLSntBlogElement extends Components.SntBlog, HTMLStencilElement {
    }
    var HTMLSntBlogElement: {
        prototype: HTMLSntBlogElement;
        new (): HTMLSntBlogElement;
    };
    interface HTMLSntBlogFeatureArticlesElement extends Components.SntBlogFeatureArticles, HTMLStencilElement {
    }
    var HTMLSntBlogFeatureArticlesElement: {
        prototype: HTMLSntBlogFeatureArticlesElement;
        new (): HTMLSntBlogFeatureArticlesElement;
    };
    interface HTMLSntBlogInfoElement extends Components.SntBlogInfo, HTMLStencilElement {
    }
    var HTMLSntBlogInfoElement: {
        prototype: HTMLSntBlogInfoElement;
        new (): HTMLSntBlogInfoElement;
    };
    interface HTMLSntBlogResultsElement extends Components.SntBlogResults, HTMLStencilElement {
    }
    var HTMLSntBlogResultsElement: {
        prototype: HTMLSntBlogResultsElement;
        new (): HTMLSntBlogResultsElement;
    };
    interface HTMLSntBreadcrumbElement extends Components.SntBreadcrumb, HTMLStencilElement {
    }
    var HTMLSntBreadcrumbElement: {
        prototype: HTMLSntBreadcrumbElement;
        new (): HTMLSntBreadcrumbElement;
    };
    interface HTMLSntButtonElement extends Components.SntButton, HTMLStencilElement {
    }
    var HTMLSntButtonElement: {
        prototype: HTMLSntButtonElement;
        new (): HTMLSntButtonElement;
    };
    interface HTMLSntConnectOffersElement extends Components.SntConnectOffers, HTMLStencilElement {
    }
    var HTMLSntConnectOffersElement: {
        prototype: HTMLSntConnectOffersElement;
        new (): HTMLSntConnectOffersElement;
    };
    interface HTMLSntCtaHighlightElement extends Components.SntCtaHighlight, HTMLStencilElement {
    }
    var HTMLSntCtaHighlightElement: {
        prototype: HTMLSntCtaHighlightElement;
        new (): HTMLSntCtaHighlightElement;
    };
    interface HTMLSntCtaReminderElement extends Components.SntCtaReminder, HTMLStencilElement {
    }
    var HTMLSntCtaReminderElement: {
        prototype: HTMLSntCtaReminderElement;
        new (): HTMLSntCtaReminderElement;
    };
    interface HTMLSntDataElement extends Components.SntData, HTMLStencilElement {
    }
    var HTMLSntDataElement: {
        prototype: HTMLSntDataElement;
        new (): HTMLSntDataElement;
    };
    interface HTMLSntDropdownElement extends Components.SntDropdown, HTMLStencilElement {
    }
    var HTMLSntDropdownElement: {
        prototype: HTMLSntDropdownElement;
        new (): HTMLSntDropdownElement;
    };
    interface HTMLSntEnhancedButtonElement extends Components.SntEnhancedButton, HTMLStencilElement {
    }
    var HTMLSntEnhancedButtonElement: {
        prototype: HTMLSntEnhancedButtonElement;
        new (): HTMLSntEnhancedButtonElement;
    };
    interface HTMLSntEventElement extends Components.SntEvent, HTMLStencilElement {
    }
    var HTMLSntEventElement: {
        prototype: HTMLSntEventElement;
        new (): HTMLSntEventElement;
    };
    interface HTMLSntFaqBlockElement extends Components.SntFaqBlock, HTMLStencilElement {
    }
    var HTMLSntFaqBlockElement: {
        prototype: HTMLSntFaqBlockElement;
        new (): HTMLSntFaqBlockElement;
    };
    interface HTMLSntFaqBlockListElement extends Components.SntFaqBlockList, HTMLStencilElement {
    }
    var HTMLSntFaqBlockListElement: {
        prototype: HTMLSntFaqBlockListElement;
        new (): HTMLSntFaqBlockListElement;
    };
    interface HTMLSntFaqFilterSliderElement extends Components.SntFaqFilterSlider, HTMLStencilElement {
    }
    var HTMLSntFaqFilterSliderElement: {
        prototype: HTMLSntFaqFilterSliderElement;
        new (): HTMLSntFaqFilterSliderElement;
    };
    interface HTMLSntFeatureLeftElement extends Components.SntFeatureLeft, HTMLStencilElement {
    }
    var HTMLSntFeatureLeftElement: {
        prototype: HTMLSntFeatureLeftElement;
        new (): HTMLSntFeatureLeftElement;
    };
    interface HTMLSntFeatureRightElement extends Components.SntFeatureRight, HTMLStencilElement {
    }
    var HTMLSntFeatureRightElement: {
        prototype: HTMLSntFeatureRightElement;
        new (): HTMLSntFeatureRightElement;
    };
    interface HTMLSntFooterElement extends Components.SntFooter, HTMLStencilElement {
    }
    var HTMLSntFooterElement: {
        prototype: HTMLSntFooterElement;
        new (): HTMLSntFooterElement;
    };
    interface HTMLSntFormElement extends Components.SntForm, HTMLStencilElement {
    }
    var HTMLSntFormElement: {
        prototype: HTMLSntFormElement;
        new (): HTMLSntFormElement;
    };
    interface HTMLSntHeaderElement extends Components.SntHeader, HTMLStencilElement {
    }
    var HTMLSntHeaderElement: {
        prototype: HTMLSntHeaderElement;
        new (): HTMLSntHeaderElement;
    };
    interface HTMLSntHeroElement extends Components.SntHero, HTMLStencilElement {
    }
    var HTMLSntHeroElement: {
        prototype: HTMLSntHeroElement;
        new (): HTMLSntHeroElement;
    };
    interface HTMLSntIconElement extends Components.SntIcon, HTMLStencilElement {
    }
    var HTMLSntIconElement: {
        prototype: HTMLSntIconElement;
        new (): HTMLSntIconElement;
    };
    interface HTMLSntIconCopyElement extends Components.SntIconCopy, HTMLStencilElement {
    }
    var HTMLSntIconCopyElement: {
        prototype: HTMLSntIconCopyElement;
        new (): HTMLSntIconCopyElement;
    };
    interface HTMLSntImageElement extends Components.SntImage, HTMLStencilElement {
    }
    var HTMLSntImageElement: {
        prototype: HTMLSntImageElement;
        new (): HTMLSntImageElement;
    };
    interface HTMLSntImageColumnElement extends Components.SntImageColumn, HTMLStencilElement {
    }
    var HTMLSntImageColumnElement: {
        prototype: HTMLSntImageColumnElement;
        new (): HTMLSntImageColumnElement;
    };
    interface HTMLSntImageIconElement extends Components.SntImageIcon, HTMLStencilElement {
    }
    var HTMLSntImageIconElement: {
        prototype: HTMLSntImageIconElement;
        new (): HTMLSntImageIconElement;
    };
    interface HTMLSntLayoutElement extends Components.SntLayout, HTMLStencilElement {
    }
    var HTMLSntLayoutElement: {
        prototype: HTMLSntLayoutElement;
        new (): HTMLSntLayoutElement;
    };
    interface HTMLSntLinkElement extends Components.SntLink, HTMLStencilElement {
    }
    var HTMLSntLinkElement: {
        prototype: HTMLSntLinkElement;
        new (): HTMLSntLinkElement;
    };
    interface HTMLSntLoginElement extends Components.SntLogin, HTMLStencilElement {
    }
    var HTMLSntLoginElement: {
        prototype: HTMLSntLoginElement;
        new (): HTMLSntLoginElement;
    };
    interface HTMLSntModalElement extends Components.SntModal, HTMLStencilElement {
    }
    var HTMLSntModalElement: {
        prototype: HTMLSntModalElement;
        new (): HTMLSntModalElement;
    };
    interface HTMLSntMultiButtonElement extends Components.SntMultiButton, HTMLStencilElement {
    }
    var HTMLSntMultiButtonElement: {
        prototype: HTMLSntMultiButtonElement;
        new (): HTMLSntMultiButtonElement;
    };
    interface HTMLSntMultiColumnMixedElement extends Components.SntMultiColumnMixed, HTMLStencilElement {
    }
    var HTMLSntMultiColumnMixedElement: {
        prototype: HTMLSntMultiColumnMixedElement;
        new (): HTMLSntMultiColumnMixedElement;
    };
    interface HTMLSntNavElement extends Components.SntNav, HTMLStencilElement {
    }
    var HTMLSntNavElement: {
        prototype: HTMLSntNavElement;
        new (): HTMLSntNavElement;
    };
    interface HTMLSntNavItemElement extends Components.SntNavItem, HTMLStencilElement {
    }
    var HTMLSntNavItemElement: {
        prototype: HTMLSntNavItemElement;
        new (): HTMLSntNavItemElement;
    };
    interface HTMLSntNavbarElement extends Components.SntNavbar, HTMLStencilElement {
    }
    var HTMLSntNavbarElement: {
        prototype: HTMLSntNavbarElement;
        new (): HTMLSntNavbarElement;
    };
    interface HTMLSntNavbarBrandElement extends Components.SntNavbarBrand, HTMLStencilElement {
    }
    var HTMLSntNavbarBrandElement: {
        prototype: HTMLSntNavbarBrandElement;
        new (): HTMLSntNavbarBrandElement;
    };
    interface HTMLSntNavbarCollapseElement extends Components.SntNavbarCollapse, HTMLStencilElement {
    }
    var HTMLSntNavbarCollapseElement: {
        prototype: HTMLSntNavbarCollapseElement;
        new (): HTMLSntNavbarCollapseElement;
    };
    interface HTMLSntNavbarToggleElement extends Components.SntNavbarToggle, HTMLStencilElement {
    }
    var HTMLSntNavbarToggleElement: {
        prototype: HTMLSntNavbarToggleElement;
        new (): HTMLSntNavbarToggleElement;
    };
    interface HTMLSntPaginationElement extends Components.SntPagination, HTMLStencilElement {
    }
    var HTMLSntPaginationElement: {
        prototype: HTMLSntPaginationElement;
        new (): HTMLSntPaginationElement;
    };
    interface HTMLSntPaneElement extends Components.SntPane, HTMLStencilElement {
    }
    var HTMLSntPaneElement: {
        prototype: HTMLSntPaneElement;
        new (): HTMLSntPaneElement;
    };
    interface HTMLSntPanelElement extends Components.SntPanel, HTMLStencilElement {
    }
    var HTMLSntPanelElement: {
        prototype: HTMLSntPanelElement;
        new (): HTMLSntPanelElement;
    };
    interface HTMLSntRecaptchaElement extends Components.SntRecaptcha, HTMLStencilElement {
    }
    var HTMLSntRecaptchaElement: {
        prototype: HTMLSntRecaptchaElement;
        new (): HTMLSntRecaptchaElement;
    };
    interface HTMLSntSearchBarElement extends Components.SntSearchBar, HTMLStencilElement {
    }
    var HTMLSntSearchBarElement: {
        prototype: HTMLSntSearchBarElement;
        new (): HTMLSntSearchBarElement;
    };
    interface HTMLSntSearchComboboxElement extends Components.SntSearchCombobox, HTMLStencilElement {
    }
    var HTMLSntSearchComboboxElement: {
        prototype: HTMLSntSearchComboboxElement;
        new (): HTMLSntSearchComboboxElement;
    };
    interface HTMLSntSearchPanelElement extends Components.SntSearchPanel, HTMLStencilElement {
    }
    var HTMLSntSearchPanelElement: {
        prototype: HTMLSntSearchPanelElement;
        new (): HTMLSntSearchPanelElement;
    };
    interface HTMLSntSearchResultElement extends Components.SntSearchResult, HTMLStencilElement {
    }
    var HTMLSntSearchResultElement: {
        prototype: HTMLSntSearchResultElement;
        new (): HTMLSntSearchResultElement;
    };
    interface HTMLSntSearchResultListElement extends Components.SntSearchResultList, HTMLStencilElement {
    }
    var HTMLSntSearchResultListElement: {
        prototype: HTMLSntSearchResultListElement;
        new (): HTMLSntSearchResultListElement;
    };
    interface HTMLSntSearchTypeaheadElement extends Components.SntSearchTypeahead, HTMLStencilElement {
    }
    var HTMLSntSearchTypeaheadElement: {
        prototype: HTMLSntSearchTypeaheadElement;
        new (): HTMLSntSearchTypeaheadElement;
    };
    interface HTMLSntShoppingCartElement extends Components.SntShoppingCart, HTMLStencilElement {
    }
    var HTMLSntShoppingCartElement: {
        prototype: HTMLSntShoppingCartElement;
        new (): HTMLSntShoppingCartElement;
    };
    interface HTMLSntSkipToMainElement extends Components.SntSkipToMain, HTMLStencilElement {
    }
    var HTMLSntSkipToMainElement: {
        prototype: HTMLSntSkipToMainElement;
        new (): HTMLSntSkipToMainElement;
    };
    interface HTMLSntSourceLinkElement extends Components.SntSourceLink, HTMLStencilElement {
    }
    var HTMLSntSourceLinkElement: {
        prototype: HTMLSntSourceLinkElement;
        new (): HTMLSntSourceLinkElement;
    };
    interface HTMLSntSourceListElement extends Components.SntSourceList, HTMLStencilElement {
    }
    var HTMLSntSourceListElement: {
        prototype: HTMLSntSourceListElement;
        new (): HTMLSntSourceListElement;
    };
    interface HTMLSntTabsElement extends Components.SntTabs, HTMLStencilElement {
    }
    var HTMLSntTabsElement: {
        prototype: HTMLSntTabsElement;
        new (): HTMLSntTabsElement;
    };
    interface HTMLSntTabsExampleElement extends Components.SntTabsExample, HTMLStencilElement {
    }
    var HTMLSntTabsExampleElement: {
        prototype: HTMLSntTabsExampleElement;
        new (): HTMLSntTabsExampleElement;
    };
    interface HTMLSntThreeColumnElement extends Components.SntThreeColumn, HTMLStencilElement {
    }
    var HTMLSntThreeColumnElement: {
        prototype: HTMLSntThreeColumnElement;
        new (): HTMLSntThreeColumnElement;
    };
    interface HTMLSntThreeColumnMixedElement extends Components.SntThreeColumnMixed, HTMLStencilElement {
    }
    var HTMLSntThreeColumnMixedElement: {
        prototype: HTMLSntThreeColumnMixedElement;
        new (): HTMLSntThreeColumnMixedElement;
    };
    interface HTMLSntTipElement extends Components.SntTip, HTMLStencilElement {
    }
    var HTMLSntTipElement: {
        prototype: HTMLSntTipElement;
        new (): HTMLSntTipElement;
    };
    interface HTMLSntTitleElement extends Components.SntTitle, HTMLStencilElement {
    }
    var HTMLSntTitleElement: {
        prototype: HTMLSntTitleElement;
        new (): HTMLSntTitleElement;
    };
    interface HTMLSntTitleCopyElement extends Components.SntTitleCopy, HTMLStencilElement {
    }
    var HTMLSntTitleCopyElement: {
        prototype: HTMLSntTitleCopyElement;
        new (): HTMLSntTitleCopyElement;
    };
    interface HTMLSntToggleElement extends Components.SntToggle, HTMLStencilElement {
    }
    var HTMLSntToggleElement: {
        prototype: HTMLSntToggleElement;
        new (): HTMLSntToggleElement;
    };
    interface HTMLSntTreeviewElement extends Components.SntTreeview, HTMLStencilElement {
    }
    var HTMLSntTreeviewElement: {
        prototype: HTMLSntTreeviewElement;
        new (): HTMLSntTreeviewElement;
    };
    interface HTMLSntTwoColumnElement extends Components.SntTwoColumn, HTMLStencilElement {
    }
    var HTMLSntTwoColumnElement: {
        prototype: HTMLSntTwoColumnElement;
        new (): HTMLSntTwoColumnElement;
    };
    interface HTMLSntTwoColumnFeatureElement extends Components.SntTwoColumnFeature, HTMLStencilElement {
    }
    var HTMLSntTwoColumnFeatureElement: {
        prototype: HTMLSntTwoColumnFeatureElement;
        new (): HTMLSntTwoColumnFeatureElement;
    };
    interface HTMLSntVerticalTabsElement extends Components.SntVerticalTabs, HTMLStencilElement {
    }
    var HTMLSntVerticalTabsElement: {
        prototype: HTMLSntVerticalTabsElement;
        new (): HTMLSntVerticalTabsElement;
    };
    interface HTMLSntVideoElement extends Components.SntVideo, HTMLStencilElement {
    }
    var HTMLSntVideoElement: {
        prototype: HTMLSntVideoElement;
        new (): HTMLSntVideoElement;
    };
    interface HTMLSntViewportElement extends Components.SntViewport, HTMLStencilElement {
    }
    var HTMLSntViewportElement: {
        prototype: HTMLSntViewportElement;
        new (): HTMLSntViewportElement;
    };
    interface HTMLSntWysiwygElement extends Components.SntWysiwyg, HTMLStencilElement {
    }
    var HTMLSntWysiwygElement: {
        prototype: HTMLSntWysiwygElement;
        new (): HTMLSntWysiwygElement;
    };
    interface HTMLSourceListExampleElement extends Components.SourceListExample, HTMLStencilElement {
    }
    var HTMLSourceListExampleElement: {
        prototype: HTMLSourceListExampleElement;
        new (): HTMLSourceListExampleElement;
    };
    interface HTMLTestimonialExampleElement extends Components.TestimonialExample, HTMLStencilElement {
    }
    var HTMLTestimonialExampleElement: {
        prototype: HTMLTestimonialExampleElement;
        new (): HTMLTestimonialExampleElement;
    };
    interface HTMLTestimonialQuoteElement extends Components.TestimonialQuote, HTMLStencilElement {
    }
    var HTMLTestimonialQuoteElement: {
        prototype: HTMLTestimonialQuoteElement;
        new (): HTMLTestimonialQuoteElement;
    };
    interface HTMLTestimonialsGroupElement extends Components.TestimonialsGroup, HTMLStencilElement {
    }
    var HTMLTestimonialsGroupElement: {
        prototype: HTMLTestimonialsGroupElement;
        new (): HTMLTestimonialsGroupElement;
    };
    interface HTMLThreeColumnExampleElement extends Components.ThreeColumnExample, HTMLStencilElement {
    }
    var HTMLThreeColumnExampleElement: {
        prototype: HTMLThreeColumnExampleElement;
        new (): HTMLThreeColumnExampleElement;
    };
    interface HTMLThreeColumnMixedExampleElement extends Components.ThreeColumnMixedExample, HTMLStencilElement {
    }
    var HTMLThreeColumnMixedExampleElement: {
        prototype: HTMLThreeColumnMixedExampleElement;
        new (): HTMLThreeColumnMixedExampleElement;
    };
    interface HTMLTipExampleElement extends Components.TipExample, HTMLStencilElement {
    }
    var HTMLTipExampleElement: {
        prototype: HTMLTipExampleElement;
        new (): HTMLTipExampleElement;
    };
    interface HTMLTitleCopyExampleElement extends Components.TitleCopyExample, HTMLStencilElement {
    }
    var HTMLTitleCopyExampleElement: {
        prototype: HTMLTitleCopyExampleElement;
        new (): HTMLTitleCopyExampleElement;
    };
    interface HTMLTitleExampleElement extends Components.TitleExample, HTMLStencilElement {
    }
    var HTMLTitleExampleElement: {
        prototype: HTMLTitleExampleElement;
        new (): HTMLTitleExampleElement;
    };
    interface HTMLTreeviewExampleElement extends Components.TreeviewExample, HTMLStencilElement {
    }
    var HTMLTreeviewExampleElement: {
        prototype: HTMLTreeviewExampleElement;
        new (): HTMLTreeviewExampleElement;
    };
    interface HTMLTwoColumnExampleElement extends Components.TwoColumnExample, HTMLStencilElement {
    }
    var HTMLTwoColumnExampleElement: {
        prototype: HTMLTwoColumnExampleElement;
        new (): HTMLTwoColumnExampleElement;
    };
    interface HTMLTwoColumnFeatureExampleElement extends Components.TwoColumnFeatureExample, HTMLStencilElement {
    }
    var HTMLTwoColumnFeatureExampleElement: {
        prototype: HTMLTwoColumnFeatureExampleElement;
        new (): HTMLTwoColumnFeatureExampleElement;
    };
    interface HTMLVerticalTabExampleElement extends Components.VerticalTabExample, HTMLStencilElement {
    }
    var HTMLVerticalTabExampleElement: {
        prototype: HTMLVerticalTabExampleElement;
        new (): HTMLVerticalTabExampleElement;
    };
    interface HTMLVideoExampleElement extends Components.VideoExample, HTMLStencilElement {
    }
    var HTMLVideoExampleElement: {
        prototype: HTMLVideoExampleElement;
        new (): HTMLVideoExampleElement;
    };
    interface HTMLElementTagNameMap {
        "accordion-example": HTMLAccordionExampleElement;
        "ad-example": HTMLAdExampleElement;
        "article-list-example": HTMLArticleListExampleElement;
        "blog-example": HTMLBlogExampleElement;
        "blog-feature-articles-example": HTMLBlogFeatureArticlesExampleElement;
        "blog-results-example": HTMLBlogResultsExampleElement;
        "breadcrumb-example": HTMLBreadcrumbExampleElement;
        "button-link": HTMLButtonLinkElement;
        "button-link-example": HTMLButtonLinkExampleElement;
        "button-link-group": HTMLButtonLinkGroupElement;
        "common-styles-example": HTMLCommonStylesExampleElement;
        "connect-offers-example": HTMLConnectOffersExampleElement;
        "cta-highlight-example": HTMLCtaHighlightExampleElement;
        "cta-reminder-example": HTMLCtaReminderExampleElement;
        "demo-app": HTMLDemoAppElement;
        "demo-app-home": HTMLDemoAppHomeElement;
        "dropdown-example": HTMLDropdownExampleElement;
        "faq-block-example": HTMLFaqBlockExampleElement;
        "faq-filter-slider-example": HTMLFaqFilterSliderExampleElement;
        "faq-pagination-example": HTMLFaqPaginationExampleElement;
        "feature-left-example": HTMLFeatureLeftExampleElement;
        "feature-right-example": HTMLFeatureRightExampleElement;
        "footer-example": HTMLFooterExampleElement;
        "form-example": HTMLFormExampleElement;
        "header-example": HTMLHeaderExampleElement;
        "hero-example": HTMLHeroExampleElement;
        "icon-copy-example": HTMLIconCopyExampleElement;
        "image-example": HTMLImageExampleElement;
        "image-icon-example": HTMLImageIconExampleElement;
        "legal-component": HTMLLegalComponentElement;
        "link-example": HTMLLinkExampleElement;
        "modal-example": HTMLModalExampleElement;
        "multi-column-example": HTMLMultiColumnExampleElement;
        "page-not-found-example": HTMLPageNotFoundExampleElement;
        "panel-example": HTMLPanelExampleElement;
        "recaptcha-example": HTMLRecaptchaExampleElement;
        "responsive-images-example": HTMLResponsiveImagesExampleElement;
        "search-combobox-example": HTMLSearchComboboxExampleElement;
        "search-results-example": HTMLSearchResultsExampleElement;
        "skiptomain-example": HTMLSkiptomainExampleElement;
        "snt-accordion": HTMLSntAccordionElement;
        "snt-accordion-builder": HTMLSntAccordionBuilderElement;
        "snt-accordion-group": HTMLSntAccordionGroupElement;
        "snt-accordion-group-builder": HTMLSntAccordionGroupBuilderElement;
        "snt-action-button": HTMLSntActionButtonElement;
        "snt-action-link": HTMLSntActionLinkElement;
        "snt-ad": HTMLSntAdElement;
        "snt-alert": HTMLSntAlertElement;
        "snt-article-link": HTMLSntArticleLinkElement;
        "snt-article-list": HTMLSntArticleListElement;
        "snt-backdrop": HTMLSntBackdropElement;
        "snt-blog": HTMLSntBlogElement;
        "snt-blog-feature-articles": HTMLSntBlogFeatureArticlesElement;
        "snt-blog-info": HTMLSntBlogInfoElement;
        "snt-blog-results": HTMLSntBlogResultsElement;
        "snt-breadcrumb": HTMLSntBreadcrumbElement;
        "snt-button": HTMLSntButtonElement;
        "snt-connect-offers": HTMLSntConnectOffersElement;
        "snt-cta-highlight": HTMLSntCtaHighlightElement;
        "snt-cta-reminder": HTMLSntCtaReminderElement;
        "snt-data": HTMLSntDataElement;
        "snt-dropdown": HTMLSntDropdownElement;
        "snt-enhanced-button": HTMLSntEnhancedButtonElement;
        "snt-event": HTMLSntEventElement;
        "snt-faq-block": HTMLSntFaqBlockElement;
        "snt-faq-block-list": HTMLSntFaqBlockListElement;
        "snt-faq-filter-slider": HTMLSntFaqFilterSliderElement;
        "snt-feature-left": HTMLSntFeatureLeftElement;
        "snt-feature-right": HTMLSntFeatureRightElement;
        "snt-footer": HTMLSntFooterElement;
        "snt-form": HTMLSntFormElement;
        "snt-header": HTMLSntHeaderElement;
        "snt-hero": HTMLSntHeroElement;
        "snt-icon": HTMLSntIconElement;
        "snt-icon-copy": HTMLSntIconCopyElement;
        "snt-image": HTMLSntImageElement;
        "snt-image-column": HTMLSntImageColumnElement;
        "snt-image-icon": HTMLSntImageIconElement;
        "snt-layout": HTMLSntLayoutElement;
        "snt-link": HTMLSntLinkElement;
        "snt-login": HTMLSntLoginElement;
        "snt-modal": HTMLSntModalElement;
        "snt-multi-button": HTMLSntMultiButtonElement;
        "snt-multi-column-mixed": HTMLSntMultiColumnMixedElement;
        "snt-nav": HTMLSntNavElement;
        "snt-nav-item": HTMLSntNavItemElement;
        "snt-navbar": HTMLSntNavbarElement;
        "snt-navbar-brand": HTMLSntNavbarBrandElement;
        "snt-navbar-collapse": HTMLSntNavbarCollapseElement;
        "snt-navbar-toggle": HTMLSntNavbarToggleElement;
        "snt-pagination": HTMLSntPaginationElement;
        "snt-pane": HTMLSntPaneElement;
        "snt-panel": HTMLSntPanelElement;
        "snt-recaptcha": HTMLSntRecaptchaElement;
        "snt-search-bar": HTMLSntSearchBarElement;
        "snt-search-combobox": HTMLSntSearchComboboxElement;
        "snt-search-panel": HTMLSntSearchPanelElement;
        "snt-search-result": HTMLSntSearchResultElement;
        "snt-search-result-list": HTMLSntSearchResultListElement;
        "snt-search-typeahead": HTMLSntSearchTypeaheadElement;
        "snt-shopping-cart": HTMLSntShoppingCartElement;
        "snt-skip-to-main": HTMLSntSkipToMainElement;
        "snt-source-link": HTMLSntSourceLinkElement;
        "snt-source-list": HTMLSntSourceListElement;
        "snt-tabs": HTMLSntTabsElement;
        "snt-tabs-example": HTMLSntTabsExampleElement;
        "snt-three-column": HTMLSntThreeColumnElement;
        "snt-three-column-mixed": HTMLSntThreeColumnMixedElement;
        "snt-tip": HTMLSntTipElement;
        "snt-title": HTMLSntTitleElement;
        "snt-title-copy": HTMLSntTitleCopyElement;
        "snt-toggle": HTMLSntToggleElement;
        "snt-treeview": HTMLSntTreeviewElement;
        "snt-two-column": HTMLSntTwoColumnElement;
        "snt-two-column-feature": HTMLSntTwoColumnFeatureElement;
        "snt-vertical-tabs": HTMLSntVerticalTabsElement;
        "snt-video": HTMLSntVideoElement;
        "snt-viewport": HTMLSntViewportElement;
        "snt-wysiwyg": HTMLSntWysiwygElement;
        "source-list-example": HTMLSourceListExampleElement;
        "testimonial-example": HTMLTestimonialExampleElement;
        "testimonial-quote": HTMLTestimonialQuoteElement;
        "testimonials-group": HTMLTestimonialsGroupElement;
        "three-column-example": HTMLThreeColumnExampleElement;
        "three-column-mixed-example": HTMLThreeColumnMixedExampleElement;
        "tip-example": HTMLTipExampleElement;
        "title-copy-example": HTMLTitleCopyExampleElement;
        "title-example": HTMLTitleExampleElement;
        "treeview-example": HTMLTreeviewExampleElement;
        "two-column-example": HTMLTwoColumnExampleElement;
        "two-column-feature-example": HTMLTwoColumnFeatureExampleElement;
        "vertical-tab-example": HTMLVerticalTabExampleElement;
        "video-example": HTMLVideoExampleElement;
    }
}
declare namespace LocalJSX {
    interface AccordionExample {
    }
    interface AdExample {
    }
    interface ArticleListExample {
    }
    interface BlogExample {
    }
    interface BlogFeatureArticlesExample {
    }
    interface BlogResultsExample {
    }
    interface BreadcrumbExample {
    }
    interface ButtonLink {
        "ariaDescribedByText"?: string;
        "ariaLabel"?: string;
        "buttonId"?: string;
        "classNames"?: string;
        "href"?: string;
        "onLinkEvent"?: (event: CustomEvent<any>) => void;
        "target"?: string;
    }
    interface ButtonLinkExample {
    }
    interface ButtonLinkGroup {
    }
    interface CommonStylesExample {
    }
    interface ConnectOffersExample {
    }
    interface CtaHighlightExample {
    }
    interface CtaReminderExample {
    }
    interface DemoApp {
    }
    interface DemoAppHome {
    }
    interface DropdownExample {
    }
    interface FaqBlockExample {
    }
    interface FaqFilterSliderExample {
    }
    interface FaqPaginationExample {
    }
    interface FeatureLeftExample {
        "viewport"?: string;
    }
    interface FeatureRightExample {
        "viewport"?: string;
    }
    interface FooterExample {
    }
    interface FormExample {
    }
    interface HeaderExample {
    }
    interface HeroExample {
    }
    interface IconCopyExample {
    }
    interface ImageExample {
    }
    interface ImageIconExample {
    }
    interface LegalComponent {
    }
    interface LinkExample {
    }
    interface ModalExample {
    }
    interface MultiColumnExample {
    }
    interface PageNotFoundExample {
    }
    interface PanelExample {
    }
    interface RecaptchaExample {
    }
    interface ResponsiveImagesExample {
    }
    interface SearchComboboxExample {
    }
    interface SearchResultsExample {
    }
    interface SkiptomainExample {
        "mainContentId"?: string;
    }
    interface SntAccordion {
        "expanded"?: boolean;
        "onAccordionEvent"?: (event: CustomEvent<object>) => void;
    }
    interface SntAccordionBuilder {
    }
    interface SntAccordionGroup {
        "multiExpand"?: boolean;
    }
    interface SntAccordionGroupBuilder {
    }
    interface SntActionButton {
        "actionData"?: string;
        "actionReference"?: string;
        "buttonId"?: string;
        "iconClassName"?: string;
        "linkTitle"?: string;
        "styleClasses"?: string;
    }
    interface SntActionLink {
        "actionData"?: string;
        "actionReference"?: string;
        "iconClassName"?: string;
        "linkId"?: string;
        "linkTitle"?: string;
        "styleClasses"?: string;
    }
    interface SntAd {
        "actionData"?: string;
        "actionReference"?: string;
        "ariaLabel"?: string;
        "buttonLabel"?: string;
        "href"?: string;
        "iconSources"?: string;
        "linkLabel"?: string;
        "logoSources"?: string;
        "styleClasses"?: string;
        "target"?: string;
        "titleString"?: string;
    }
    interface SntAlert {
        "animatable"?: boolean;
        "dismissible"?: boolean;
        "explorerOnly"?: string;
        "onDismissed"?: (event: CustomEvent<any>) => void;
        "type"?: string;
    }
    interface SntArticleLink {
        "ariaLabel"?: string;
        "copy"?: string;
        "hiddenTitle"?: string;
        "href"?: string;
    }
    interface SntArticleList {
        "articles"?: Article[];
        "articlesJson"?: string;
        "heading"?: string;
    }
    interface SntBackdrop {
        /**
          * Emitted when the backdrop is tapped
         */
        "onSntBackdropTap"?: (event: CustomEvent<any>) => void;
        /**
          * If `true`, the backdroo will stop propagation on tap
         */
        "stopPropagation"?: Boolean;
        /**
          * If `true`, the backdrop can be clicked and will emit `ionBackdropTap` event.
         */
        "tappable"?: Boolean;
    }
    interface SntBlog {
        "blogLink": string;
        "imgAltText"?: string;
        "imgSrc": string;
        "imgSrcSet"?: string;
        "openInNewWindow"?: boolean;
        "tagText": string;
        "timeToRead": string;
        "titleText": string;
    }
    interface SntBlogFeatureArticles {
    }
    interface SntBlogInfo {
        "accessibilityText"?: string;
        "blogLink"?: string;
        "publishedTime"?: string;
        "timeToRead"?: string;
        "titleText"?: string;
    }
    interface SntBlogResults {
        "blogResultsString"?: string;
    }
    interface SntBreadcrumb {
        "trail"?: any;
    }
    interface SntButton {
        "buttonId"?: string;
        "hiddenTitle"?: string;
        "iconClassName"?: string;
        "onSntButtonClick"?: (event: CustomEvent<any>) => void;
        "onSntButtonKeyDown"?: (event: CustomEvent<any>) => void;
        "styleClasses"?: string;
    }
    interface SntConnectOffers {
        "actionData"?: string;
        "actionReference"?: string;
        "altTag"?: string;
        "ariaLabel"?: string;
        "buttonLabel"?: string;
        "description"?: string;
        "href"?: string;
        "logoSources"?: string;
        "modalData"?: string;
        "offerAvailable"?: string;
        "offerTitle"?: string;
        "target"?: string;
        "titleString"?: string;
    }
    interface SntCtaHighlight {
        "actionData"?: string;
        "actionReference"?: string;
        "buttonId"?: string;
        "cta"?: string;
        "url"?: string;
        "urlTarget"?: string;
    }
    interface SntCtaReminder {
        "actionData"?: string;
        "actionReference"?: string;
        "buttonId"?: string;
        "linkTitle"?: string;
        "styleClasses"?: string;
        "titleString"?: string;
        "url"?: string;
        "urlTarget"?: string;
    }
    interface SntData {
        "data"?: string;
        "lazyLoad"?: boolean;
        "src"?: string;
        "type"?: string;
    }
    interface SntDropdown {
        "itemConfiguration"?: ItemConfiguration;
        "labelText": string;
        "name"?: string;
        "onDropdownSelectionChange"?: (event: CustomEvent<any>) => void;
        "opened"?: boolean;
        "placeholderText"?: string;
        "required"?: boolean;
    }
    interface SntEnhancedButton {
        "ariaLabel"?: string;
        "ctaText"?: string;
        "discountText"?: string;
        "href"?: string;
        "leftIconSources"?: string;
        "linkId"?: string;
        "onSntButtonClick"?: (event: CustomEvent<any>) => void;
        "onSntButtonKeyDown"?: (event: CustomEvent<any>) => void;
        "rightIconSources"?: string;
        "styleClasses"?: string;
        "target"?: string;
    }
    interface SntEvent {
        "filters"?: string;
        "type"?: string;
    }
    interface SntFaqBlock {
        "articlesCount"?: string;
        "blockLink"?: string;
        "bodyText"?: string;
        "titleText"?: string;
    }
    interface SntFaqBlockList {
        "faqBlockList"?: {
        titleText: string;
        blockLink?: string;
        bodyText: string;
        articlesCount: string;
    }[];
        "menuAriaLabel"?: string;
    }
    interface SntFaqFilterSlider {
        "currentActive"?: string;
        "filterItems"?: string;
        "menuAriaLabel"?: string;
        "onFaqFilterClick"?: (event: CustomEvent<string>) => void;
    }
    interface SntFeatureLeft {
        "blogLink": string;
        "imgAltText"?: string;
        "imgSrc": string;
        "imgSrcSet"?: string;
        "openInNewWindow"?: boolean;
        "tagText": string;
        "timeToRead": string;
        "titleText": string;
    }
    interface SntFeatureRight {
        "blogLink": string;
        "imgAltText"?: string;
        "imgSrc": string;
        "imgSrcSet"?: string;
        "openInNewWindow"?: boolean;
        "tagText": string;
        "timeToRead": string;
        "titleText": string;
    }
    interface SntFooter {
        "styleClasses"?: string;
    }
    interface SntForm {
        "onFormSubmit"?: (event: CustomEvent<any>) => void;
        "submitCallBackhandler"?: any;
        "text"?: string;
    }
    interface SntHeader {
        "active"?: boolean;
        "fixed"?: boolean;
        "languageJson"?: string;
        "mainContentId"?: string;
        "styleClasses"?: string;
    }
    interface SntHero {
        "properties"?: string;
        "propertiesSrc"?: string;
    }
    interface SntIcon {
        "styleClasses"?: string;
    }
    interface SntIconCopy {
        "linkActionData"?: string;
        "linkActionReference"?: string;
        "linkHref"?: string;
        "linkId"?: string;
        "linkRel"?: string;
        "linkTarget"?: string;
        "linkTitle"?: string;
        "logoIsSet"?: boolean;
        "properties"?: string;
        "propertiesSrc"?: string;
        "resizeEl"?: HTMLElement;
        "styleClasses"?: string;
        "titleString"?: string;
    }
    interface SntImage {
        "dataSrc"?: string;
        "height"?: string;
        "imgAlt"?: string;
        "sizes"?: string;
        "srcImage"?: string;
        "srcset"?: string;
        "styleClasses"?: string;
        "width"?: string;
    }
    interface SntImageColumn {
        "imageSrc"?: string;
        "imgAlt"?: string;
    }
    interface SntImageIcon {
        "imgAlt"?: string;
        "properties"?: string;
        "styleClasses"?: string;
    }
    interface SntLayout {
        "onViewportChanged"?: (event: CustomEvent<any>) => void;
        "padding"?: 'none'|'top-only'|'bottom-only'|'remove-sides'|'vertical-only';
        "viewport"?: string;
    }
    interface SntLink {
        "ariaCurrent"?: string|boolean;
        "ariaLabel"?: string;
        "classNames"?: string;
        "current"?: boolean;
        "downloadName"?: string;
        "hiddenTitle"?: string;
        "href"?: string;
        "isExternal"?: boolean;
        "linkId"?: string;
        "onLinkEvent"?: (event: CustomEvent<any>) => void;
        "rel"?: string;
        "target"?: string;
    }
    interface SntLogin {
        "accountDashboardUrl"?: string;
        "accountLoginUrl"?: string;
        "authed"?: string;
        "languageJson"?: string;
    }
    interface SntModal {
        "languageString"?: string;
        "modalTitle"?: string;
        "onModalEvent"?: (event: CustomEvent<object>) => void;
        "options"?: ModalOptions;
        "shown"?: boolean;
        "styleClasses"?: string;
    }
    interface SntMultiButton {
    }
    interface SntMultiColumnMixed {
        "columnCount"?: string;
        "styleClasses"?: string;
    }
    interface SntNav {
        "expander"?: string;
        "separator"?: boolean;
        "styleClasses"?: string;
    }
    interface SntNavItem {
        "current"?: boolean;
        "expanded"?: boolean;
        "href"?: string;
        "iconClassName"?: string;
        "isExternal"?: boolean;
        "linkTitle"?: string;
        "onNavItemEvent"?: (event: CustomEvent<any>) => void;
        "styleClasses"?: string;
        "target"?: string;
    }
    interface SntNavbar {
        "active"?: boolean;
        "languageString"?: string;
        "styleClasses"?: string;
        "viewport"?: string;
    }
    interface SntNavbarBrand {
        "href"?: string;
        "imgAlt"?: string;
        "imgSrc"?: string;
    }
    interface SntNavbarCollapse {
        "logoUrl"?: string;
        "onNavbarToggled"?: (event: CustomEvent<any>) => void;
        "shown"?: boolean;
        "viewport"?: string;
    }
    interface SntNavbarToggle {
        "ariaControls"?: string;
        "collapsed"?: boolean;
        "languageString"?: string;
        "onNavbarToggled"?: (event: CustomEvent<any>) => void;
    }
    interface SntPagination {
        "curr"?: number;
        "nextLinkLang"?: string;
        "onPageChanged"?: (event: CustomEvent<string>) => void;
        "pageNumAriaLang"?: string;
        "pageNumLang"?: string;
        "paginationNavLang"?: string;
        "prevLinkLang"?: string;
        "totalPages"?: number;
    }
    interface SntPane {
        "animated"?: boolean;
        "collapsed"?: boolean;
        "styleClasses"?: string;
    }
    interface SntPanel {
    }
    interface SntRecaptcha {
        "language"?: string;
        "onGrecaptchaLoaded"?: (event: CustomEvent<object>) => void;
        "sitekey"?: string;
    }
    interface SntSearchBar {
        "active"?: boolean;
        "languageJson"?: string;
        "styleClasses"?: string;
    }
    interface SntSearchCombobox {
        /**
          * Prop Lifecycle Events
         */
        "activeIndex"?: number;
        "ariaLabel"?: string;
        "ariaLabelledby"?: string;
        /**
          * Public Properties API
         */
        "autoComplete"?: boolean;
        "languageJson"?: string;
        "languageString"?: string;
        "onSntBlur"?: (event: CustomEvent<void>) => void;
        "onSntFocus"?: (event: CustomEvent<void>) => void;
        /**
          * Events Section
         */
        "onSntInput"?: (event: CustomEvent<KeyboardEvent>) => void;
        "onSntSearchSubmitted"?: (event: CustomEvent<any>) => void;
        "padding"?: 'none' | 'top-only' | 'bottom-only' | 'remove-sides' | 'vertical-only';
        "searchFunctionRef"?: string;
        "value"?: string | null;
    }
    interface SntSearchPanel {
        "active"?: boolean;
        "languageJson"?: string;
        "styleClasses"?: string;
    }
    interface SntSearchResult {
        "searchResult"?: SearchResult;
    }
    interface SntSearchResultList {
        "noResultMsg"?: string;
        "searchResultListJson"?: string;
        "separator"?: boolean;
    }
    interface SntSearchTypeahead {
        "languageJson"?: string;
        "searchComboboxId"?: string;
    }
    interface SntShoppingCart {
        "cartValue"?: string;
    }
    interface SntSkipToMain {
        "ariaLabel"?: string;
        "linkText"?: string;
        "mainContentId"?: string;
    }
    interface SntSourceLink {
        "ariaLabel"?: string;
        "href"?: string;
        "rel"?: string;
        "target"?: string;
    }
    interface SntSourceList {
        "panelId"?: string;
        "sourceHeading"?: string;
    }
    interface SntTabs {
    }
    interface SntTabsExample {
    }
    interface SntThreeColumn {
        "styleClasses"?: string;
    }
    interface SntThreeColumnMixed {
        "styleClasses"?: string;
    }
    interface SntTip {
        "iconPath"?: string;
    }
    interface SntTitle {
        "clampLines"?: number;
        "titleType"?: string;
        "truncationString"?: string;
    }
    interface SntTitleCopy {
        "styleClasses"?: string;
        "titleString"?: string;
    }
    interface SntToggle {
        "onToggle"?: (event: CustomEvent<any>) => void;
    }
    interface SntTreeview {
        /**
          * Events and Event Emitters
         */
        "onSntChange"?: (event: CustomEvent<any>) => void;
        /**
          * Public Properties API
         */
        "structure"?: string;
    }
    interface SntTwoColumn {
        "styleClasses"?: string;
    }
    interface SntTwoColumnFeature {
        "copyText": string;
        "imageAltText"?: string;
        "imagePath": string;
        "imagePosition"?: string;
        "linkTitle"?: string;
        "linkUrl"?: string;
        "openLinkInNewWindow"?: boolean;
        "primaryButtonAction"?: string;
        "primaryButtonData"?: string;
        "primaryButtonText"?: string;
        "properties"?: string;
        "secondaryButtonAction"?: string;
        "secondaryButtonData"?: string;
        "secondaryButtonText"?: string;
        "titleString": string;
    }
    interface SntVerticalTabs {
    }
    interface SntVideo {
        "headline"?: string;
        "oembedUrl": string;
        "playUrl": string;
        "shareUrl": string;
        "transcriptSummaryClose"?: string;
        "transcriptSummaryOpen"?: string;
    }
    interface SntViewport {
        "devices"?: string;
        "height"?: string;
        "name"?: string;
        "spacing"?: string;
    }
    interface SntWysiwyg {
    }
    interface SourceListExample {
    }
    interface TestimonialExample {
    }
    interface TestimonialQuote {
        "containerId"?: string;
        "fill"?: string;
        "from"?: string;
        "headline"?: string;
    }
    interface TestimonialsGroup {
        "cycleType"?: string | boolean;
        "groupHeadline"?: string;
        "groupId"?: string;
        "indicatorSelector"?: string;
        "nextSelector"?: string;
        "onHideSlide"?: (event: CustomEvent<any>) => void;
        "onShowSlide"?: (event: CustomEvent<any>) => void;
        "prevSelector"?: string;
        "ride"?: boolean;
        "selected"?: number;
        "slideSelector"?: string;
        "wrap"?: boolean;
    }
    interface ThreeColumnExample {
    }
    interface ThreeColumnMixedExample {
    }
    interface TipExample {
    }
    interface TitleCopyExample {
    }
    interface TitleExample {
    }
    interface TreeviewExample {
    }
    interface TwoColumnExample {
    }
    interface TwoColumnFeatureExample {
    }
    interface VerticalTabExample {
    }
    interface VideoExample {
    }
    interface IntrinsicElements {
        "accordion-example": AccordionExample;
        "ad-example": AdExample;
        "article-list-example": ArticleListExample;
        "blog-example": BlogExample;
        "blog-feature-articles-example": BlogFeatureArticlesExample;
        "blog-results-example": BlogResultsExample;
        "breadcrumb-example": BreadcrumbExample;
        "button-link": ButtonLink;
        "button-link-example": ButtonLinkExample;
        "button-link-group": ButtonLinkGroup;
        "common-styles-example": CommonStylesExample;
        "connect-offers-example": ConnectOffersExample;
        "cta-highlight-example": CtaHighlightExample;
        "cta-reminder-example": CtaReminderExample;
        "demo-app": DemoApp;
        "demo-app-home": DemoAppHome;
        "dropdown-example": DropdownExample;
        "faq-block-example": FaqBlockExample;
        "faq-filter-slider-example": FaqFilterSliderExample;
        "faq-pagination-example": FaqPaginationExample;
        "feature-left-example": FeatureLeftExample;
        "feature-right-example": FeatureRightExample;
        "footer-example": FooterExample;
        "form-example": FormExample;
        "header-example": HeaderExample;
        "hero-example": HeroExample;
        "icon-copy-example": IconCopyExample;
        "image-example": ImageExample;
        "image-icon-example": ImageIconExample;
        "legal-component": LegalComponent;
        "link-example": LinkExample;
        "modal-example": ModalExample;
        "multi-column-example": MultiColumnExample;
        "page-not-found-example": PageNotFoundExample;
        "panel-example": PanelExample;
        "recaptcha-example": RecaptchaExample;
        "responsive-images-example": ResponsiveImagesExample;
        "search-combobox-example": SearchComboboxExample;
        "search-results-example": SearchResultsExample;
        "skiptomain-example": SkiptomainExample;
        "snt-accordion": SntAccordion;
        "snt-accordion-builder": SntAccordionBuilder;
        "snt-accordion-group": SntAccordionGroup;
        "snt-accordion-group-builder": SntAccordionGroupBuilder;
        "snt-action-button": SntActionButton;
        "snt-action-link": SntActionLink;
        "snt-ad": SntAd;
        "snt-alert": SntAlert;
        "snt-article-link": SntArticleLink;
        "snt-article-list": SntArticleList;
        "snt-backdrop": SntBackdrop;
        "snt-blog": SntBlog;
        "snt-blog-feature-articles": SntBlogFeatureArticles;
        "snt-blog-info": SntBlogInfo;
        "snt-blog-results": SntBlogResults;
        "snt-breadcrumb": SntBreadcrumb;
        "snt-button": SntButton;
        "snt-connect-offers": SntConnectOffers;
        "snt-cta-highlight": SntCtaHighlight;
        "snt-cta-reminder": SntCtaReminder;
        "snt-data": SntData;
        "snt-dropdown": SntDropdown;
        "snt-enhanced-button": SntEnhancedButton;
        "snt-event": SntEvent;
        "snt-faq-block": SntFaqBlock;
        "snt-faq-block-list": SntFaqBlockList;
        "snt-faq-filter-slider": SntFaqFilterSlider;
        "snt-feature-left": SntFeatureLeft;
        "snt-feature-right": SntFeatureRight;
        "snt-footer": SntFooter;
        "snt-form": SntForm;
        "snt-header": SntHeader;
        "snt-hero": SntHero;
        "snt-icon": SntIcon;
        "snt-icon-copy": SntIconCopy;
        "snt-image": SntImage;
        "snt-image-column": SntImageColumn;
        "snt-image-icon": SntImageIcon;
        "snt-layout": SntLayout;
        "snt-link": SntLink;
        "snt-login": SntLogin;
        "snt-modal": SntModal;
        "snt-multi-button": SntMultiButton;
        "snt-multi-column-mixed": SntMultiColumnMixed;
        "snt-nav": SntNav;
        "snt-nav-item": SntNavItem;
        "snt-navbar": SntNavbar;
        "snt-navbar-brand": SntNavbarBrand;
        "snt-navbar-collapse": SntNavbarCollapse;
        "snt-navbar-toggle": SntNavbarToggle;
        "snt-pagination": SntPagination;
        "snt-pane": SntPane;
        "snt-panel": SntPanel;
        "snt-recaptcha": SntRecaptcha;
        "snt-search-bar": SntSearchBar;
        "snt-search-combobox": SntSearchCombobox;
        "snt-search-panel": SntSearchPanel;
        "snt-search-result": SntSearchResult;
        "snt-search-result-list": SntSearchResultList;
        "snt-search-typeahead": SntSearchTypeahead;
        "snt-shopping-cart": SntShoppingCart;
        "snt-skip-to-main": SntSkipToMain;
        "snt-source-link": SntSourceLink;
        "snt-source-list": SntSourceList;
        "snt-tabs": SntTabs;
        "snt-tabs-example": SntTabsExample;
        "snt-three-column": SntThreeColumn;
        "snt-three-column-mixed": SntThreeColumnMixed;
        "snt-tip": SntTip;
        "snt-title": SntTitle;
        "snt-title-copy": SntTitleCopy;
        "snt-toggle": SntToggle;
        "snt-treeview": SntTreeview;
        "snt-two-column": SntTwoColumn;
        "snt-two-column-feature": SntTwoColumnFeature;
        "snt-vertical-tabs": SntVerticalTabs;
        "snt-video": SntVideo;
        "snt-viewport": SntViewport;
        "snt-wysiwyg": SntWysiwyg;
        "source-list-example": SourceListExample;
        "testimonial-example": TestimonialExample;
        "testimonial-quote": TestimonialQuote;
        "testimonials-group": TestimonialsGroup;
        "three-column-example": ThreeColumnExample;
        "three-column-mixed-example": ThreeColumnMixedExample;
        "tip-example": TipExample;
        "title-copy-example": TitleCopyExample;
        "title-example": TitleExample;
        "treeview-example": TreeviewExample;
        "two-column-example": TwoColumnExample;
        "two-column-feature-example": TwoColumnFeatureExample;
        "vertical-tab-example": VerticalTabExample;
        "video-example": VideoExample;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "accordion-example": LocalJSX.AccordionExample & JSXBase.HTMLAttributes<HTMLAccordionExampleElement>;
            "ad-example": LocalJSX.AdExample & JSXBase.HTMLAttributes<HTMLAdExampleElement>;
            "article-list-example": LocalJSX.ArticleListExample & JSXBase.HTMLAttributes<HTMLArticleListExampleElement>;
            "blog-example": LocalJSX.BlogExample & JSXBase.HTMLAttributes<HTMLBlogExampleElement>;
            "blog-feature-articles-example": LocalJSX.BlogFeatureArticlesExample & JSXBase.HTMLAttributes<HTMLBlogFeatureArticlesExampleElement>;
            "blog-results-example": LocalJSX.BlogResultsExample & JSXBase.HTMLAttributes<HTMLBlogResultsExampleElement>;
            "breadcrumb-example": LocalJSX.BreadcrumbExample & JSXBase.HTMLAttributes<HTMLBreadcrumbExampleElement>;
            "button-link": LocalJSX.ButtonLink & JSXBase.HTMLAttributes<HTMLButtonLinkElement>;
            "button-link-example": LocalJSX.ButtonLinkExample & JSXBase.HTMLAttributes<HTMLButtonLinkExampleElement>;
            "button-link-group": LocalJSX.ButtonLinkGroup & JSXBase.HTMLAttributes<HTMLButtonLinkGroupElement>;
            "common-styles-example": LocalJSX.CommonStylesExample & JSXBase.HTMLAttributes<HTMLCommonStylesExampleElement>;
            "connect-offers-example": LocalJSX.ConnectOffersExample & JSXBase.HTMLAttributes<HTMLConnectOffersExampleElement>;
            "cta-highlight-example": LocalJSX.CtaHighlightExample & JSXBase.HTMLAttributes<HTMLCtaHighlightExampleElement>;
            "cta-reminder-example": LocalJSX.CtaReminderExample & JSXBase.HTMLAttributes<HTMLCtaReminderExampleElement>;
            "demo-app": LocalJSX.DemoApp & JSXBase.HTMLAttributes<HTMLDemoAppElement>;
            "demo-app-home": LocalJSX.DemoAppHome & JSXBase.HTMLAttributes<HTMLDemoAppHomeElement>;
            "dropdown-example": LocalJSX.DropdownExample & JSXBase.HTMLAttributes<HTMLDropdownExampleElement>;
            "faq-block-example": LocalJSX.FaqBlockExample & JSXBase.HTMLAttributes<HTMLFaqBlockExampleElement>;
            "faq-filter-slider-example": LocalJSX.FaqFilterSliderExample & JSXBase.HTMLAttributes<HTMLFaqFilterSliderExampleElement>;
            "faq-pagination-example": LocalJSX.FaqPaginationExample & JSXBase.HTMLAttributes<HTMLFaqPaginationExampleElement>;
            "feature-left-example": LocalJSX.FeatureLeftExample & JSXBase.HTMLAttributes<HTMLFeatureLeftExampleElement>;
            "feature-right-example": LocalJSX.FeatureRightExample & JSXBase.HTMLAttributes<HTMLFeatureRightExampleElement>;
            "footer-example": LocalJSX.FooterExample & JSXBase.HTMLAttributes<HTMLFooterExampleElement>;
            "form-example": LocalJSX.FormExample & JSXBase.HTMLAttributes<HTMLFormExampleElement>;
            "header-example": LocalJSX.HeaderExample & JSXBase.HTMLAttributes<HTMLHeaderExampleElement>;
            "hero-example": LocalJSX.HeroExample & JSXBase.HTMLAttributes<HTMLHeroExampleElement>;
            "icon-copy-example": LocalJSX.IconCopyExample & JSXBase.HTMLAttributes<HTMLIconCopyExampleElement>;
            "image-example": LocalJSX.ImageExample & JSXBase.HTMLAttributes<HTMLImageExampleElement>;
            "image-icon-example": LocalJSX.ImageIconExample & JSXBase.HTMLAttributes<HTMLImageIconExampleElement>;
            "legal-component": LocalJSX.LegalComponent & JSXBase.HTMLAttributes<HTMLLegalComponentElement>;
            "link-example": LocalJSX.LinkExample & JSXBase.HTMLAttributes<HTMLLinkExampleElement>;
            "modal-example": LocalJSX.ModalExample & JSXBase.HTMLAttributes<HTMLModalExampleElement>;
            "multi-column-example": LocalJSX.MultiColumnExample & JSXBase.HTMLAttributes<HTMLMultiColumnExampleElement>;
            "page-not-found-example": LocalJSX.PageNotFoundExample & JSXBase.HTMLAttributes<HTMLPageNotFoundExampleElement>;
            "panel-example": LocalJSX.PanelExample & JSXBase.HTMLAttributes<HTMLPanelExampleElement>;
            "recaptcha-example": LocalJSX.RecaptchaExample & JSXBase.HTMLAttributes<HTMLRecaptchaExampleElement>;
            "responsive-images-example": LocalJSX.ResponsiveImagesExample & JSXBase.HTMLAttributes<HTMLResponsiveImagesExampleElement>;
            "search-combobox-example": LocalJSX.SearchComboboxExample & JSXBase.HTMLAttributes<HTMLSearchComboboxExampleElement>;
            "search-results-example": LocalJSX.SearchResultsExample & JSXBase.HTMLAttributes<HTMLSearchResultsExampleElement>;
            "skiptomain-example": LocalJSX.SkiptomainExample & JSXBase.HTMLAttributes<HTMLSkiptomainExampleElement>;
            "snt-accordion": LocalJSX.SntAccordion & JSXBase.HTMLAttributes<HTMLSntAccordionElement>;
            "snt-accordion-builder": LocalJSX.SntAccordionBuilder & JSXBase.HTMLAttributes<HTMLSntAccordionBuilderElement>;
            "snt-accordion-group": LocalJSX.SntAccordionGroup & JSXBase.HTMLAttributes<HTMLSntAccordionGroupElement>;
            "snt-accordion-group-builder": LocalJSX.SntAccordionGroupBuilder & JSXBase.HTMLAttributes<HTMLSntAccordionGroupBuilderElement>;
            "snt-action-button": LocalJSX.SntActionButton & JSXBase.HTMLAttributes<HTMLSntActionButtonElement>;
            "snt-action-link": LocalJSX.SntActionLink & JSXBase.HTMLAttributes<HTMLSntActionLinkElement>;
            "snt-ad": LocalJSX.SntAd & JSXBase.HTMLAttributes<HTMLSntAdElement>;
            "snt-alert": LocalJSX.SntAlert & JSXBase.HTMLAttributes<HTMLSntAlertElement>;
            "snt-article-link": LocalJSX.SntArticleLink & JSXBase.HTMLAttributes<HTMLSntArticleLinkElement>;
            "snt-article-list": LocalJSX.SntArticleList & JSXBase.HTMLAttributes<HTMLSntArticleListElement>;
            "snt-backdrop": LocalJSX.SntBackdrop & JSXBase.HTMLAttributes<HTMLSntBackdropElement>;
            "snt-blog": LocalJSX.SntBlog & JSXBase.HTMLAttributes<HTMLSntBlogElement>;
            "snt-blog-feature-articles": LocalJSX.SntBlogFeatureArticles & JSXBase.HTMLAttributes<HTMLSntBlogFeatureArticlesElement>;
            "snt-blog-info": LocalJSX.SntBlogInfo & JSXBase.HTMLAttributes<HTMLSntBlogInfoElement>;
            "snt-blog-results": LocalJSX.SntBlogResults & JSXBase.HTMLAttributes<HTMLSntBlogResultsElement>;
            "snt-breadcrumb": LocalJSX.SntBreadcrumb & JSXBase.HTMLAttributes<HTMLSntBreadcrumbElement>;
            "snt-button": LocalJSX.SntButton & JSXBase.HTMLAttributes<HTMLSntButtonElement>;
            "snt-connect-offers": LocalJSX.SntConnectOffers & JSXBase.HTMLAttributes<HTMLSntConnectOffersElement>;
            "snt-cta-highlight": LocalJSX.SntCtaHighlight & JSXBase.HTMLAttributes<HTMLSntCtaHighlightElement>;
            "snt-cta-reminder": LocalJSX.SntCtaReminder & JSXBase.HTMLAttributes<HTMLSntCtaReminderElement>;
            "snt-data": LocalJSX.SntData & JSXBase.HTMLAttributes<HTMLSntDataElement>;
            "snt-dropdown": LocalJSX.SntDropdown & JSXBase.HTMLAttributes<HTMLSntDropdownElement>;
            "snt-enhanced-button": LocalJSX.SntEnhancedButton & JSXBase.HTMLAttributes<HTMLSntEnhancedButtonElement>;
            "snt-event": LocalJSX.SntEvent & JSXBase.HTMLAttributes<HTMLSntEventElement>;
            "snt-faq-block": LocalJSX.SntFaqBlock & JSXBase.HTMLAttributes<HTMLSntFaqBlockElement>;
            "snt-faq-block-list": LocalJSX.SntFaqBlockList & JSXBase.HTMLAttributes<HTMLSntFaqBlockListElement>;
            "snt-faq-filter-slider": LocalJSX.SntFaqFilterSlider & JSXBase.HTMLAttributes<HTMLSntFaqFilterSliderElement>;
            "snt-feature-left": LocalJSX.SntFeatureLeft & JSXBase.HTMLAttributes<HTMLSntFeatureLeftElement>;
            "snt-feature-right": LocalJSX.SntFeatureRight & JSXBase.HTMLAttributes<HTMLSntFeatureRightElement>;
            "snt-footer": LocalJSX.SntFooter & JSXBase.HTMLAttributes<HTMLSntFooterElement>;
            "snt-form": LocalJSX.SntForm & JSXBase.HTMLAttributes<HTMLSntFormElement>;
            "snt-header": LocalJSX.SntHeader & JSXBase.HTMLAttributes<HTMLSntHeaderElement>;
            "snt-hero": LocalJSX.SntHero & JSXBase.HTMLAttributes<HTMLSntHeroElement>;
            "snt-icon": LocalJSX.SntIcon & JSXBase.HTMLAttributes<HTMLSntIconElement>;
            "snt-icon-copy": LocalJSX.SntIconCopy & JSXBase.HTMLAttributes<HTMLSntIconCopyElement>;
            "snt-image": LocalJSX.SntImage & JSXBase.HTMLAttributes<HTMLSntImageElement>;
            "snt-image-column": LocalJSX.SntImageColumn & JSXBase.HTMLAttributes<HTMLSntImageColumnElement>;
            "snt-image-icon": LocalJSX.SntImageIcon & JSXBase.HTMLAttributes<HTMLSntImageIconElement>;
            "snt-layout": LocalJSX.SntLayout & JSXBase.HTMLAttributes<HTMLSntLayoutElement>;
            "snt-link": LocalJSX.SntLink & JSXBase.HTMLAttributes<HTMLSntLinkElement>;
            "snt-login": LocalJSX.SntLogin & JSXBase.HTMLAttributes<HTMLSntLoginElement>;
            "snt-modal": LocalJSX.SntModal & JSXBase.HTMLAttributes<HTMLSntModalElement>;
            "snt-multi-button": LocalJSX.SntMultiButton & JSXBase.HTMLAttributes<HTMLSntMultiButtonElement>;
            "snt-multi-column-mixed": LocalJSX.SntMultiColumnMixed & JSXBase.HTMLAttributes<HTMLSntMultiColumnMixedElement>;
            "snt-nav": LocalJSX.SntNav & JSXBase.HTMLAttributes<HTMLSntNavElement>;
            "snt-nav-item": LocalJSX.SntNavItem & JSXBase.HTMLAttributes<HTMLSntNavItemElement>;
            "snt-navbar": LocalJSX.SntNavbar & JSXBase.HTMLAttributes<HTMLSntNavbarElement>;
            "snt-navbar-brand": LocalJSX.SntNavbarBrand & JSXBase.HTMLAttributes<HTMLSntNavbarBrandElement>;
            "snt-navbar-collapse": LocalJSX.SntNavbarCollapse & JSXBase.HTMLAttributes<HTMLSntNavbarCollapseElement>;
            "snt-navbar-toggle": LocalJSX.SntNavbarToggle & JSXBase.HTMLAttributes<HTMLSntNavbarToggleElement>;
            "snt-pagination": LocalJSX.SntPagination & JSXBase.HTMLAttributes<HTMLSntPaginationElement>;
            "snt-pane": LocalJSX.SntPane & JSXBase.HTMLAttributes<HTMLSntPaneElement>;
            "snt-panel": LocalJSX.SntPanel & JSXBase.HTMLAttributes<HTMLSntPanelElement>;
            "snt-recaptcha": LocalJSX.SntRecaptcha & JSXBase.HTMLAttributes<HTMLSntRecaptchaElement>;
            "snt-search-bar": LocalJSX.SntSearchBar & JSXBase.HTMLAttributes<HTMLSntSearchBarElement>;
            "snt-search-combobox": LocalJSX.SntSearchCombobox & JSXBase.HTMLAttributes<HTMLSntSearchComboboxElement>;
            "snt-search-panel": LocalJSX.SntSearchPanel & JSXBase.HTMLAttributes<HTMLSntSearchPanelElement>;
            "snt-search-result": LocalJSX.SntSearchResult & JSXBase.HTMLAttributes<HTMLSntSearchResultElement>;
            "snt-search-result-list": LocalJSX.SntSearchResultList & JSXBase.HTMLAttributes<HTMLSntSearchResultListElement>;
            "snt-search-typeahead": LocalJSX.SntSearchTypeahead & JSXBase.HTMLAttributes<HTMLSntSearchTypeaheadElement>;
            "snt-shopping-cart": LocalJSX.SntShoppingCart & JSXBase.HTMLAttributes<HTMLSntShoppingCartElement>;
            "snt-skip-to-main": LocalJSX.SntSkipToMain & JSXBase.HTMLAttributes<HTMLSntSkipToMainElement>;
            "snt-source-link": LocalJSX.SntSourceLink & JSXBase.HTMLAttributes<HTMLSntSourceLinkElement>;
            "snt-source-list": LocalJSX.SntSourceList & JSXBase.HTMLAttributes<HTMLSntSourceListElement>;
            "snt-tabs": LocalJSX.SntTabs & JSXBase.HTMLAttributes<HTMLSntTabsElement>;
            "snt-tabs-example": LocalJSX.SntTabsExample & JSXBase.HTMLAttributes<HTMLSntTabsExampleElement>;
            "snt-three-column": LocalJSX.SntThreeColumn & JSXBase.HTMLAttributes<HTMLSntThreeColumnElement>;
            "snt-three-column-mixed": LocalJSX.SntThreeColumnMixed & JSXBase.HTMLAttributes<HTMLSntThreeColumnMixedElement>;
            "snt-tip": LocalJSX.SntTip & JSXBase.HTMLAttributes<HTMLSntTipElement>;
            "snt-title": LocalJSX.SntTitle & JSXBase.HTMLAttributes<HTMLSntTitleElement>;
            "snt-title-copy": LocalJSX.SntTitleCopy & JSXBase.HTMLAttributes<HTMLSntTitleCopyElement>;
            "snt-toggle": LocalJSX.SntToggle & JSXBase.HTMLAttributes<HTMLSntToggleElement>;
            "snt-treeview": LocalJSX.SntTreeview & JSXBase.HTMLAttributes<HTMLSntTreeviewElement>;
            "snt-two-column": LocalJSX.SntTwoColumn & JSXBase.HTMLAttributes<HTMLSntTwoColumnElement>;
            "snt-two-column-feature": LocalJSX.SntTwoColumnFeature & JSXBase.HTMLAttributes<HTMLSntTwoColumnFeatureElement>;
            "snt-vertical-tabs": LocalJSX.SntVerticalTabs & JSXBase.HTMLAttributes<HTMLSntVerticalTabsElement>;
            "snt-video": LocalJSX.SntVideo & JSXBase.HTMLAttributes<HTMLSntVideoElement>;
            "snt-viewport": LocalJSX.SntViewport & JSXBase.HTMLAttributes<HTMLSntViewportElement>;
            "snt-wysiwyg": LocalJSX.SntWysiwyg & JSXBase.HTMLAttributes<HTMLSntWysiwygElement>;
            "source-list-example": LocalJSX.SourceListExample & JSXBase.HTMLAttributes<HTMLSourceListExampleElement>;
            "testimonial-example": LocalJSX.TestimonialExample & JSXBase.HTMLAttributes<HTMLTestimonialExampleElement>;
            "testimonial-quote": LocalJSX.TestimonialQuote & JSXBase.HTMLAttributes<HTMLTestimonialQuoteElement>;
            "testimonials-group": LocalJSX.TestimonialsGroup & JSXBase.HTMLAttributes<HTMLTestimonialsGroupElement>;
            "three-column-example": LocalJSX.ThreeColumnExample & JSXBase.HTMLAttributes<HTMLThreeColumnExampleElement>;
            "three-column-mixed-example": LocalJSX.ThreeColumnMixedExample & JSXBase.HTMLAttributes<HTMLThreeColumnMixedExampleElement>;
            "tip-example": LocalJSX.TipExample & JSXBase.HTMLAttributes<HTMLTipExampleElement>;
            "title-copy-example": LocalJSX.TitleCopyExample & JSXBase.HTMLAttributes<HTMLTitleCopyExampleElement>;
            "title-example": LocalJSX.TitleExample & JSXBase.HTMLAttributes<HTMLTitleExampleElement>;
            "treeview-example": LocalJSX.TreeviewExample & JSXBase.HTMLAttributes<HTMLTreeviewExampleElement>;
            "two-column-example": LocalJSX.TwoColumnExample & JSXBase.HTMLAttributes<HTMLTwoColumnExampleElement>;
            "two-column-feature-example": LocalJSX.TwoColumnFeatureExample & JSXBase.HTMLAttributes<HTMLTwoColumnFeatureExampleElement>;
            "vertical-tab-example": LocalJSX.VerticalTabExample & JSXBase.HTMLAttributes<HTMLVerticalTabExampleElement>;
            "video-example": LocalJSX.VideoExample & JSXBase.HTMLAttributes<HTMLVideoExampleElement>;
        }
    }
}
