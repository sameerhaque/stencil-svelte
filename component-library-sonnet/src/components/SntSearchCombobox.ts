/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { Components, JSX } from 'component-library';


interface SntSearchComboboxProps {
  
  /** Public Properties API */
  autoComplete?: Components.SntSearchCombobox["autoComplete"]
  
  /**  */
  ariaLabelledby?: Components.SntSearchCombobox["ariaLabelledby"]
  
  /**  */
  ariaLabel?: Components.SntSearchCombobox["ariaLabel"]
  
  /**  */
  languageJson?: Components.SntSearchCombobox["languageJson"]
  
  /**  */
  languageString?: Components.SntSearchCombobox["languageString"]
  
  /**  */
  searchFunctionRef?: Components.SntSearchCombobox["searchFunctionRef"]
  
  /**  */
  value?: Components.SntSearchCombobox["value"]
  
  /**  */
  padding?: Components.SntSearchCombobox["padding"]
  
  /** Prop Lifecycle Events */
  activeIndex?: Components.SntSearchCombobox["activeIndex"]
}

interface SntSearchComboboxEvents {
  
  /** Events Section */
  sntInput: Parameters<JSX.SntSearchCombobox["onSntInput"]>[0]
  
  /**  */
  sntFocus: Parameters<JSX.SntSearchCombobox["onSntFocus"]>[0]
  
  /**  */
  sntBlur: Parameters<JSX.SntSearchCombobox["onSntBlur"]>[0]
  
  /**  */
  sntSearchSubmitted: Parameters<JSX.SntSearchCombobox["onSntSearchSubmitted"]>[0]
}

interface SntSearchComboboxSlots {
  default: any
}
  
/* generated by Svelte v3.35.0 */
import {
	SvelteComponent,
	binding_callbacks,
	create_slot,
	detach,
	element,
	init,
	insert,
	listen,
	run_all,
	safe_not_equal,
	set_custom_element_data,
	transition_in,
	transition_out,
	update_slot
} from "svelte/internal";

import { createEventDispatcher, onMount } from "svelte";

function create_fragment(ctx) {
	let snt_search_combobox;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[16].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[15], null);

	return {
		c() {
			snt_search_combobox = element("snt-search-combobox");
			if (default_slot) default_slot.c();
			set_custom_element_data(snt_search_combobox, "auto-complete", /*autoComplete*/ ctx[0]);
			set_custom_element_data(snt_search_combobox, "aria-labelledby", /*ariaLabelledby*/ ctx[1]);
			set_custom_element_data(snt_search_combobox, "aria-label", /*ariaLabel*/ ctx[2]);
			set_custom_element_data(snt_search_combobox, "language-json", /*languageJson*/ ctx[3]);
			set_custom_element_data(snt_search_combobox, "language-string", /*languageString*/ ctx[4]);
			set_custom_element_data(snt_search_combobox, "search-function-ref", /*searchFunctionRef*/ ctx[5]);
			set_custom_element_data(snt_search_combobox, "value", /*value*/ ctx[6]);
			set_custom_element_data(snt_search_combobox, "padding", /*padding*/ ctx[7]);
			set_custom_element_data(snt_search_combobox, "active-index", /*activeIndex*/ ctx[8]);
		},
		m(target, anchor) {
			insert(target, snt_search_combobox, anchor);

			if (default_slot) {
				default_slot.m(snt_search_combobox, null);
			}

			/*snt_search_combobox_binding*/ ctx[17](snt_search_combobox);
			current = true;

			if (!mounted) {
				dispose = [
					listen(snt_search_combobox, "sntInput", /*onEvent*/ ctx[10]),
					listen(snt_search_combobox, "sntFocus", /*onEvent*/ ctx[10]),
					listen(snt_search_combobox, "sntBlur", /*onEvent*/ ctx[10]),
					listen(snt_search_combobox, "sntSearchSubmitted", /*onEvent*/ ctx[10])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 32768) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[15], dirty, null, null);
				}
			}

			if (!current || dirty & /*autoComplete*/ 1) {
				set_custom_element_data(snt_search_combobox, "auto-complete", /*autoComplete*/ ctx[0]);
			}

			if (!current || dirty & /*ariaLabelledby*/ 2) {
				set_custom_element_data(snt_search_combobox, "aria-labelledby", /*ariaLabelledby*/ ctx[1]);
			}

			if (!current || dirty & /*ariaLabel*/ 4) {
				set_custom_element_data(snt_search_combobox, "aria-label", /*ariaLabel*/ ctx[2]);
			}

			if (!current || dirty & /*languageJson*/ 8) {
				set_custom_element_data(snt_search_combobox, "language-json", /*languageJson*/ ctx[3]);
			}

			if (!current || dirty & /*languageString*/ 16) {
				set_custom_element_data(snt_search_combobox, "language-string", /*languageString*/ ctx[4]);
			}

			if (!current || dirty & /*searchFunctionRef*/ 32) {
				set_custom_element_data(snt_search_combobox, "search-function-ref", /*searchFunctionRef*/ ctx[5]);
			}

			if (!current || dirty & /*value*/ 64) {
				set_custom_element_data(snt_search_combobox, "value", /*value*/ ctx[6]);
			}

			if (!current || dirty & /*padding*/ 128) {
				set_custom_element_data(snt_search_combobox, "padding", /*padding*/ ctx[7]);
			}

			if (!current || dirty & /*activeIndex*/ 256) {
				set_custom_element_data(snt_search_combobox, "active-index", /*activeIndex*/ ctx[8]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(snt_search_combobox);
			if (default_slot) default_slot.d(detaching);
			/*snt_search_combobox_binding*/ ctx[17](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let __ref;
	let __mounted = false;
	const dispatch = createEventDispatcher();
	let { autoComplete = undefined } = $$props;
	let { ariaLabelledby = undefined } = $$props;
	let { ariaLabel = undefined } = $$props;
	let { languageJson = undefined } = $$props;
	let { languageString = undefined } = $$props;
	let { searchFunctionRef = undefined } = $$props;
	let { value = undefined } = $$props;
	let { padding = undefined } = $$props;
	let { activeIndex = undefined } = $$props;
	const setFocus = (...args) => __ref.setFocus(...args);
	const getInputElement = (...args) => __ref.getInputElement(...args);
	const setSearchSuggestions = (...args) => __ref.setSearchSuggestions(...args);
	const getWebComponent = () => __ref;

	onMount(() => {
		__mounted = true;
	});

	const setProp = (prop, value) => {
		if (__ref) $$invalidate(9, __ref[prop] = value, __ref);
	};

	const onEvent = e => {
		e.stopPropagation();
		dispatch(e.type, e.detail);
	};

	function snt_search_combobox_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			__ref = $$value;
			$$invalidate(9, __ref);
		});
	}

	$$self.$$set = $$props => {
		if ("autoComplete" in $$props) $$invalidate(0, autoComplete = $$props.autoComplete);
		if ("ariaLabelledby" in $$props) $$invalidate(1, ariaLabelledby = $$props.ariaLabelledby);
		if ("ariaLabel" in $$props) $$invalidate(2, ariaLabel = $$props.ariaLabel);
		if ("languageJson" in $$props) $$invalidate(3, languageJson = $$props.languageJson);
		if ("languageString" in $$props) $$invalidate(4, languageString = $$props.languageString);
		if ("searchFunctionRef" in $$props) $$invalidate(5, searchFunctionRef = $$props.searchFunctionRef);
		if ("value" in $$props) $$invalidate(6, value = $$props.value);
		if ("padding" in $$props) $$invalidate(7, padding = $$props.padding);
		if ("activeIndex" in $$props) $$invalidate(8, activeIndex = $$props.activeIndex);
		if ("$$scope" in $$props) $$invalidate(15, $$scope = $$props.$$scope);
	};

	return [
		autoComplete,
		ariaLabelledby,
		ariaLabel,
		languageJson,
		languageString,
		searchFunctionRef,
		value,
		padding,
		activeIndex,
		__ref,
		onEvent,
		setFocus,
		getInputElement,
		setSearchSuggestions,
		getWebComponent,
		$$scope,
		slots,
		snt_search_combobox_binding
	];
}

class SntSearchCombobox extends SvelteComponent {
  $$prop_def: SntSearchComboboxProps;
  $$events_def: SntSearchComboboxEvents;
  $$slot_def: SntSearchComboboxSlots;

  $on<K extends keyof SntSearchComboboxEvents>(type: K, callback: (e: SntSearchComboboxEvents[K]) => any): () => void {
	  return super.$on(type, callback);
	}

  $set($$props: Partial<SntSearchComboboxProps>): void {
	  super.$set($$props);
	}

	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			autoComplete: 0,
			ariaLabelledby: 1,
			ariaLabel: 2,
			languageJson: 3,
			languageString: 4,
			searchFunctionRef: 5,
			value: 6,
			padding: 7,
			activeIndex: 8,
			setFocus: 11,
			getInputElement: 12,
			setSearchSuggestions: 13,
			getWebComponent: 14
		});
	}

	
  /** Public Methods API */
 get setFocus(): Components.SntSearchCombobox["setFocus"] {
		return this.$$.ctx[11];
	}

	
  /**  */
 get getInputElement(): Components.SntSearchCombobox["getInputElement"] {
		return this.$$.ctx[12];
	}

	
  /**  */
 get setSearchSuggestions(): Components.SntSearchCombobox["setSearchSuggestions"] {
		return this.$$.ctx[13];
	}

	get getWebComponent(): HTMLSntSearchComboboxElement | undefined {
		return this.$$.ctx[14];
	}
}

export default SntSearchCombobox;