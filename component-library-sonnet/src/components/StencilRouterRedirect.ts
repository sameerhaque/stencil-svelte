/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { Components, JSX } from 'component-library';


interface StencilRouterRedirectProps {
  
  /**  */
  history?: Components.StencilRouterRedirect["history"]
  
  /**  */
  root?: Components.StencilRouterRedirect["root"]
  
  /**  */
  url?: Components.StencilRouterRedirect["url"]
}

interface StencilRouterRedirectEvents {
  
}

interface StencilRouterRedirectSlots {
  default: any
}
  
/* generated by Svelte v3.35.0 */
import {
	SvelteComponent,
	binding_callbacks,
	create_slot,
	detach,
	element,
	init,
	insert,
	safe_not_equal,
	set_custom_element_data,
	transition_in,
	transition_out,
	update_slot
} from "svelte/internal";

import { createEventDispatcher, onMount } from "svelte";

function create_fragment(ctx) {
	let stencil_router_redirect;
	let current;
	const default_slot_template = /*#slots*/ ctx[7].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[6], null);

	return {
		c() {
			stencil_router_redirect = element("stencil-router-redirect");
			if (default_slot) default_slot.c();
			set_custom_element_data(stencil_router_redirect, "root", /*root*/ ctx[0]);
			set_custom_element_data(stencil_router_redirect, "url", /*url*/ ctx[1]);
		},
		m(target, anchor) {
			insert(target, stencil_router_redirect, anchor);

			if (default_slot) {
				default_slot.m(stencil_router_redirect, null);
			}

			/*stencil_router_redirect_binding*/ ctx[8](stencil_router_redirect);
			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 64) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[6], dirty, null, null);
				}
			}

			if (!current || dirty & /*root*/ 1) {
				set_custom_element_data(stencil_router_redirect, "root", /*root*/ ctx[0]);
			}

			if (!current || dirty & /*url*/ 2) {
				set_custom_element_data(stencil_router_redirect, "url", /*url*/ ctx[1]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(stencil_router_redirect);
			if (default_slot) default_slot.d(detaching);
			/*stencil_router_redirect_binding*/ ctx[8](null);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let __ref;
	let __mounted = false;
	const dispatch = createEventDispatcher();
	let { history = undefined } = $$props;
	let { root = undefined } = $$props;
	let { url = undefined } = $$props;
	const getWebComponent = () => __ref;

	onMount(() => {
		$$invalidate(5, __mounted = true);
	});

	const setProp = (prop, value) => {
		if (__ref) $$invalidate(2, __ref[prop] = value, __ref);
	};

	const onEvent = e => {
		e.stopPropagation();
		dispatch(e.type, e.detail);
	};

	function stencil_router_redirect_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			__ref = $$value;
			$$invalidate(2, __ref);
		});
	}

	$$self.$$set = $$props => {
		if ("history" in $$props) $$invalidate(3, history = $$props.history);
		if ("root" in $$props) $$invalidate(0, root = $$props.root);
		if ("url" in $$props) $$invalidate(1, url = $$props.url);
		if ("$$scope" in $$props) $$invalidate(6, $$scope = $$props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*__mounted, history*/ 40) {
			$: if (__mounted) setProp("history", history);
		}
	};

	return [
		root,
		url,
		__ref,
		history,
		getWebComponent,
		__mounted,
		$$scope,
		slots,
		stencil_router_redirect_binding
	];
}

class StencilRouterRedirect extends SvelteComponent {
  $$prop_def: StencilRouterRedirectProps;
  $$events_def: StencilRouterRedirectEvents;
  $$slot_def: StencilRouterRedirectSlots;

  $on<K extends keyof StencilRouterRedirectEvents>(type: K, callback: (e: StencilRouterRedirectEvents[K]) => any): () => void {
	  return super.$on(type, callback);
	}

  $set($$props: Partial<StencilRouterRedirectProps>): void {
	  super.$set($$props);
	}

	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			history: 3,
			root: 0,
			url: 1,
			getWebComponent: 4
		});
	}

	get getWebComponent(): HTMLStencilRouterRedirectElement | undefined {
		return this.$$.ctx[4];
	}
}

export default StencilRouterRedirect;