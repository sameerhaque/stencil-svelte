/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { Components, JSX } from 'component-library';


interface SntAccordionProps {
  
  /**  */
  expanded?: Components.SntAccordion["expanded"]
}

interface SntAccordionEvents {
  
  /**  */
  accordionEvent: Parameters<JSX.SntAccordion["onAccordionEvent"]>[0]
}

interface SntAccordionSlots {
  default: any
}
  
/* generated by Svelte v3.35.0 */
import {
	SvelteComponent,
	binding_callbacks,
	create_slot,
	detach,
	element,
	init,
	insert,
	listen,
	safe_not_equal,
	set_custom_element_data,
	transition_in,
	transition_out,
	update_slot
} from "svelte/internal";

import { createEventDispatcher, onMount } from "svelte";

function create_fragment(ctx) {
	let snt_accordion;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[10].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[9], null);

	return {
		c() {
			snt_accordion = element("snt-accordion");
			if (default_slot) default_slot.c();
			set_custom_element_data(snt_accordion, "expanded", /*expanded*/ ctx[0]);
		},
		m(target, anchor) {
			insert(target, snt_accordion, anchor);

			if (default_slot) {
				default_slot.m(snt_accordion, null);
			}

			/*snt_accordion_binding*/ ctx[11](snt_accordion);
			current = true;

			if (!mounted) {
				dispose = listen(snt_accordion, "accordionEvent", /*onEvent*/ ctx[2]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 512) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[9], dirty, null, null);
				}
			}

			if (!current || dirty & /*expanded*/ 1) {
				set_custom_element_data(snt_accordion, "expanded", /*expanded*/ ctx[0]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(snt_accordion);
			if (default_slot) default_slot.d(detaching);
			/*snt_accordion_binding*/ ctx[11](null);
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let __ref;
	let __mounted = false;
	const dispatch = createEventDispatcher();
	let { expanded = undefined } = $$props;
	const isCollapsed = (...args) => __ref.isCollapsed(...args);
	const isExpanded = (...args) => __ref.isExpanded(...args);
	const collapse = (...args) => __ref.collapse(...args);
	const expand = (...args) => __ref.expand(...args);
	const toggle = (...args) => __ref.toggle(...args);
	const getWebComponent = () => __ref;

	onMount(() => {
		__mounted = true;
	});

	const setProp = (prop, value) => {
		if (__ref) $$invalidate(1, __ref[prop] = value, __ref);
	};

	const onEvent = e => {
		e.stopPropagation();
		dispatch(e.type, e.detail);
	};

	function snt_accordion_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			__ref = $$value;
			$$invalidate(1, __ref);
		});
	}

	$$self.$$set = $$props => {
		if ("expanded" in $$props) $$invalidate(0, expanded = $$props.expanded);
		if ("$$scope" in $$props) $$invalidate(9, $$scope = $$props.$$scope);
	};

	return [
		expanded,
		__ref,
		onEvent,
		isCollapsed,
		isExpanded,
		collapse,
		expand,
		toggle,
		getWebComponent,
		$$scope,
		slots,
		snt_accordion_binding
	];
}

class SntAccordion extends SvelteComponent {
  $$prop_def: SntAccordionProps;
  $$events_def: SntAccordionEvents;
  $$slot_def: SntAccordionSlots;

  $on<K extends keyof SntAccordionEvents>(type: K, callback: (e: SntAccordionEvents[K]) => any): () => void {
	  return super.$on(type, callback);
	}

  $set($$props: Partial<SntAccordionProps>): void {
	  super.$set($$props);
	}

	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			expanded: 0,
			isCollapsed: 3,
			isExpanded: 4,
			collapse: 5,
			expand: 6,
			toggle: 7,
			getWebComponent: 8
		});
	}

	
  /**  */
 get isCollapsed(): Components.SntAccordion["isCollapsed"] {
		return this.$$.ctx[3];
	}

	
  /**  */
 get isExpanded(): Components.SntAccordion["isExpanded"] {
		return this.$$.ctx[4];
	}

	
  /**  */
 get collapse(): Components.SntAccordion["collapse"] {
		return this.$$.ctx[5];
	}

	
  /**  */
 get expand(): Components.SntAccordion["expand"] {
		return this.$$.ctx[6];
	}

	
  /**  */
 get toggle(): Components.SntAccordion["toggle"] {
		return this.$$.ctx[7];
	}

	get getWebComponent(): HTMLSntAccordionElement | undefined {
		return this.$$.ctx[8];
	}
}

export default SntAccordion;