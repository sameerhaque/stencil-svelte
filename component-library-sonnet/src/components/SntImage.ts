/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { Components, JSX } from 'component-library';


interface SntImageProps {
  
  /**  */
  dataSrc?: Components.SntImage["dataSrc"]
  
  /**  */
  srcImage?: Components.SntImage["srcImage"]
  
  /**  */
  width?: Components.SntImage["width"]
  
  /**  */
  height?: Components.SntImage["height"]
  
  /**  */
  srcset?: Components.SntImage["srcset"]
  
  /**  */
  imgAlt?: Components.SntImage["imgAlt"]
  
  /**  */
  sizes?: Components.SntImage["sizes"]
  
  /**  */
  styleClasses?: Components.SntImage["styleClasses"]
}

interface SntImageEvents {
  
}

interface SntImageSlots {
  default: any
}
  
/* generated by Svelte v3.35.0 */
import {
	SvelteComponent,
	binding_callbacks,
	create_slot,
	detach,
	element,
	init,
	insert,
	safe_not_equal,
	set_custom_element_data,
	transition_in,
	transition_out,
	update_slot
} from "svelte/internal";

import { createEventDispatcher, onMount } from "svelte";

function create_fragment(ctx) {
	let snt_image;
	let current;
	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);

	return {
		c() {
			snt_image = element("snt-image");
			if (default_slot) default_slot.c();
			set_custom_element_data(snt_image, "data-src", /*dataSrc*/ ctx[0]);
			set_custom_element_data(snt_image, "src-image", /*srcImage*/ ctx[1]);
			set_custom_element_data(snt_image, "width", /*width*/ ctx[2]);
			set_custom_element_data(snt_image, "height", /*height*/ ctx[3]);
			set_custom_element_data(snt_image, "srcset", /*srcset*/ ctx[4]);
			set_custom_element_data(snt_image, "img-alt", /*imgAlt*/ ctx[5]);
			set_custom_element_data(snt_image, "sizes", /*sizes*/ ctx[6]);
			set_custom_element_data(snt_image, "style-classes", /*styleClasses*/ ctx[7]);
		},
		m(target, anchor) {
			insert(target, snt_image, anchor);

			if (default_slot) {
				default_slot.m(snt_image, null);
			}

			/*snt_image_binding*/ ctx[12](snt_image);
			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 1024) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[10], dirty, null, null);
				}
			}

			if (!current || dirty & /*dataSrc*/ 1) {
				set_custom_element_data(snt_image, "data-src", /*dataSrc*/ ctx[0]);
			}

			if (!current || dirty & /*srcImage*/ 2) {
				set_custom_element_data(snt_image, "src-image", /*srcImage*/ ctx[1]);
			}

			if (!current || dirty & /*width*/ 4) {
				set_custom_element_data(snt_image, "width", /*width*/ ctx[2]);
			}

			if (!current || dirty & /*height*/ 8) {
				set_custom_element_data(snt_image, "height", /*height*/ ctx[3]);
			}

			if (!current || dirty & /*srcset*/ 16) {
				set_custom_element_data(snt_image, "srcset", /*srcset*/ ctx[4]);
			}

			if (!current || dirty & /*imgAlt*/ 32) {
				set_custom_element_data(snt_image, "img-alt", /*imgAlt*/ ctx[5]);
			}

			if (!current || dirty & /*sizes*/ 64) {
				set_custom_element_data(snt_image, "sizes", /*sizes*/ ctx[6]);
			}

			if (!current || dirty & /*styleClasses*/ 128) {
				set_custom_element_data(snt_image, "style-classes", /*styleClasses*/ ctx[7]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(snt_image);
			if (default_slot) default_slot.d(detaching);
			/*snt_image_binding*/ ctx[12](null);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let __ref;
	let __mounted = false;
	const dispatch = createEventDispatcher();
	let { dataSrc = undefined } = $$props;
	let { srcImage = undefined } = $$props;
	let { width = undefined } = $$props;
	let { height = undefined } = $$props;
	let { srcset = undefined } = $$props;
	let { imgAlt = undefined } = $$props;
	let { sizes = undefined } = $$props;
	let { styleClasses = undefined } = $$props;
	const getWebComponent = () => __ref;

	onMount(() => {
		__mounted = true;
	});

	const setProp = (prop, value) => {
		if (__ref) $$invalidate(8, __ref[prop] = value, __ref);
	};

	const onEvent = e => {
		e.stopPropagation();
		dispatch(e.type, e.detail);
	};

	function snt_image_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			__ref = $$value;
			$$invalidate(8, __ref);
		});
	}

	$$self.$$set = $$props => {
		if ("dataSrc" in $$props) $$invalidate(0, dataSrc = $$props.dataSrc);
		if ("srcImage" in $$props) $$invalidate(1, srcImage = $$props.srcImage);
		if ("width" in $$props) $$invalidate(2, width = $$props.width);
		if ("height" in $$props) $$invalidate(3, height = $$props.height);
		if ("srcset" in $$props) $$invalidate(4, srcset = $$props.srcset);
		if ("imgAlt" in $$props) $$invalidate(5, imgAlt = $$props.imgAlt);
		if ("sizes" in $$props) $$invalidate(6, sizes = $$props.sizes);
		if ("styleClasses" in $$props) $$invalidate(7, styleClasses = $$props.styleClasses);
		if ("$$scope" in $$props) $$invalidate(10, $$scope = $$props.$$scope);
	};

	return [
		dataSrc,
		srcImage,
		width,
		height,
		srcset,
		imgAlt,
		sizes,
		styleClasses,
		__ref,
		getWebComponent,
		$$scope,
		slots,
		snt_image_binding
	];
}

class SntImage extends SvelteComponent {
  $$prop_def: SntImageProps;
  $$events_def: SntImageEvents;
  $$slot_def: SntImageSlots;

  $on<K extends keyof SntImageEvents>(type: K, callback: (e: SntImageEvents[K]) => any): () => void {
	  return super.$on(type, callback);
	}

  $set($$props: Partial<SntImageProps>): void {
	  super.$set($$props);
	}

	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			dataSrc: 0,
			srcImage: 1,
			width: 2,
			height: 3,
			srcset: 4,
			imgAlt: 5,
			sizes: 6,
			styleClasses: 7,
			getWebComponent: 9
		});
	}

	get getWebComponent(): HTMLSntImageElement | undefined {
		return this.$$.ctx[9];
	}
}

export default SntImage;