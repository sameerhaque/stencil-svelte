/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { Components, JSX } from 'component-library';


interface ButtonLinkProps {
  
  /**  */
  href?: Components.ButtonLink["href"]
  
  /**  */
  target?: Components.ButtonLink["target"]
  
  /**  */
  ariaLabel?: Components.ButtonLink["ariaLabel"]
  
  /**  */
  ariaDescribedByText?: Components.ButtonLink["ariaDescribedByText"]
  
  /**  */
  classNames?: Components.ButtonLink["classNames"]
  
  /**  */
  buttonId?: Components.ButtonLink["buttonId"]
}

interface ButtonLinkEvents {
  
  /**  */
  linkEvent: Parameters<JSX.ButtonLink["onLinkEvent"]>[0]
}

interface ButtonLinkSlots {
  default: any
}
  
/* generated by Svelte v3.35.0 */
import {
	SvelteComponent,
	binding_callbacks,
	create_slot,
	detach,
	element,
	init,
	insert,
	listen,
	safe_not_equal,
	set_custom_element_data,
	transition_in,
	transition_out,
	update_slot
} from "svelte/internal";

import { createEventDispatcher, onMount } from "svelte";

function create_fragment(ctx) {
	let button_link;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[10].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[9], null);

	return {
		c() {
			button_link = element("button-link");
			if (default_slot) default_slot.c();
			set_custom_element_data(button_link, "href", /*href*/ ctx[0]);
			set_custom_element_data(button_link, "target", /*target*/ ctx[1]);
			set_custom_element_data(button_link, "aria-label", /*ariaLabel*/ ctx[2]);
			set_custom_element_data(button_link, "aria-described-by-text", /*ariaDescribedByText*/ ctx[3]);
			set_custom_element_data(button_link, "class-names", /*classNames*/ ctx[4]);
			set_custom_element_data(button_link, "button-id", /*buttonId*/ ctx[5]);
		},
		m(target, anchor) {
			insert(target, button_link, anchor);

			if (default_slot) {
				default_slot.m(button_link, null);
			}

			/*button_link_binding*/ ctx[11](button_link);
			current = true;

			if (!mounted) {
				dispose = listen(button_link, "linkEvent", /*onEvent*/ ctx[7]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 512) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[9], dirty, null, null);
				}
			}

			if (!current || dirty & /*href*/ 1) {
				set_custom_element_data(button_link, "href", /*href*/ ctx[0]);
			}

			if (!current || dirty & /*target*/ 2) {
				set_custom_element_data(button_link, "target", /*target*/ ctx[1]);
			}

			if (!current || dirty & /*ariaLabel*/ 4) {
				set_custom_element_data(button_link, "aria-label", /*ariaLabel*/ ctx[2]);
			}

			if (!current || dirty & /*ariaDescribedByText*/ 8) {
				set_custom_element_data(button_link, "aria-described-by-text", /*ariaDescribedByText*/ ctx[3]);
			}

			if (!current || dirty & /*classNames*/ 16) {
				set_custom_element_data(button_link, "class-names", /*classNames*/ ctx[4]);
			}

			if (!current || dirty & /*buttonId*/ 32) {
				set_custom_element_data(button_link, "button-id", /*buttonId*/ ctx[5]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(button_link);
			if (default_slot) default_slot.d(detaching);
			/*button_link_binding*/ ctx[11](null);
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let __ref;
	let __mounted = false;
	const dispatch = createEventDispatcher();
	let { href = undefined } = $$props;
	let { target = undefined } = $$props;
	let { ariaLabel = undefined } = $$props;
	let { ariaDescribedByText = undefined } = $$props;
	let { classNames = undefined } = $$props;
	let { buttonId = undefined } = $$props;
	const getWebComponent = () => __ref;

	onMount(() => {
		__mounted = true;
	});

	const setProp = (prop, value) => {
		if (__ref) $$invalidate(6, __ref[prop] = value, __ref);
	};

	const onEvent = e => {
		e.stopPropagation();
		dispatch(e.type, e.detail);
	};

	function button_link_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			__ref = $$value;
			$$invalidate(6, __ref);
		});
	}

	$$self.$$set = $$props => {
		if ("href" in $$props) $$invalidate(0, href = $$props.href);
		if ("target" in $$props) $$invalidate(1, target = $$props.target);
		if ("ariaLabel" in $$props) $$invalidate(2, ariaLabel = $$props.ariaLabel);
		if ("ariaDescribedByText" in $$props) $$invalidate(3, ariaDescribedByText = $$props.ariaDescribedByText);
		if ("classNames" in $$props) $$invalidate(4, classNames = $$props.classNames);
		if ("buttonId" in $$props) $$invalidate(5, buttonId = $$props.buttonId);
		if ("$$scope" in $$props) $$invalidate(9, $$scope = $$props.$$scope);
	};

	return [
		href,
		target,
		ariaLabel,
		ariaDescribedByText,
		classNames,
		buttonId,
		__ref,
		onEvent,
		getWebComponent,
		$$scope,
		slots,
		button_link_binding
	];
}

class ButtonLink extends SvelteComponent {
  $$prop_def: ButtonLinkProps;
  $$events_def: ButtonLinkEvents;
  $$slot_def: ButtonLinkSlots;

  $on<K extends keyof ButtonLinkEvents>(type: K, callback: (e: ButtonLinkEvents[K]) => any): () => void {
	  return super.$on(type, callback);
	}

  $set($$props: Partial<ButtonLinkProps>): void {
	  super.$set($$props);
	}

	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			href: 0,
			target: 1,
			ariaLabel: 2,
			ariaDescribedByText: 3,
			classNames: 4,
			buttonId: 5,
			getWebComponent: 8
		});
	}

	get getWebComponent(): HTMLButtonLinkElement | undefined {
		return this.$$.ctx[8];
	}
}

export default ButtonLink;