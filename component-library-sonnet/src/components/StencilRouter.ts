/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { Components, JSX } from 'component-library';


interface StencilRouterProps {
  
  /**  */
  root?: Components.StencilRouter["root"]
  
  /**  */
  historyType?: Components.StencilRouter["historyType"]
  
  /**  */
  titleSuffix?: Components.StencilRouter["titleSuffix"]
  
  /**  */
  scrollTopOffset?: Components.StencilRouter["scrollTopOffset"]
}

interface StencilRouterEvents {
  
}

interface StencilRouterSlots {
  default: any
}
  
/* generated by Svelte v3.35.0 */
import {
	SvelteComponent,
	binding_callbacks,
	create_slot,
	detach,
	element,
	init,
	insert,
	safe_not_equal,
	set_custom_element_data,
	transition_in,
	transition_out,
	update_slot
} from "svelte/internal";

import { createEventDispatcher, onMount } from "svelte";

function create_fragment(ctx) {
	let stencil_router;
	let current;
	const default_slot_template = /*#slots*/ ctx[7].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[6], null);

	return {
		c() {
			stencil_router = element("stencil-router");
			if (default_slot) default_slot.c();
			set_custom_element_data(stencil_router, "root", /*root*/ ctx[0]);
			set_custom_element_data(stencil_router, "history-type", /*historyType*/ ctx[1]);
			set_custom_element_data(stencil_router, "title-suffix", /*titleSuffix*/ ctx[2]);
			set_custom_element_data(stencil_router, "scroll-top-offset", /*scrollTopOffset*/ ctx[3]);
		},
		m(target, anchor) {
			insert(target, stencil_router, anchor);

			if (default_slot) {
				default_slot.m(stencil_router, null);
			}

			/*stencil_router_binding*/ ctx[8](stencil_router);
			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 64) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[6], dirty, null, null);
				}
			}

			if (!current || dirty & /*root*/ 1) {
				set_custom_element_data(stencil_router, "root", /*root*/ ctx[0]);
			}

			if (!current || dirty & /*historyType*/ 2) {
				set_custom_element_data(stencil_router, "history-type", /*historyType*/ ctx[1]);
			}

			if (!current || dirty & /*titleSuffix*/ 4) {
				set_custom_element_data(stencil_router, "title-suffix", /*titleSuffix*/ ctx[2]);
			}

			if (!current || dirty & /*scrollTopOffset*/ 8) {
				set_custom_element_data(stencil_router, "scroll-top-offset", /*scrollTopOffset*/ ctx[3]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(stencil_router);
			if (default_slot) default_slot.d(detaching);
			/*stencil_router_binding*/ ctx[8](null);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let __ref;
	let __mounted = false;
	const dispatch = createEventDispatcher();
	let { root = undefined } = $$props;
	let { historyType = undefined } = $$props;
	let { titleSuffix = undefined } = $$props;
	let { scrollTopOffset = undefined } = $$props;
	const getWebComponent = () => __ref;

	onMount(() => {
		__mounted = true;
	});

	const setProp = (prop, value) => {
		if (__ref) $$invalidate(4, __ref[prop] = value, __ref);
	};

	const onEvent = e => {
		e.stopPropagation();
		dispatch(e.type, e.detail);
	};

	function stencil_router_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			__ref = $$value;
			$$invalidate(4, __ref);
		});
	}

	$$self.$$set = $$props => {
		if ("root" in $$props) $$invalidate(0, root = $$props.root);
		if ("historyType" in $$props) $$invalidate(1, historyType = $$props.historyType);
		if ("titleSuffix" in $$props) $$invalidate(2, titleSuffix = $$props.titleSuffix);
		if ("scrollTopOffset" in $$props) $$invalidate(3, scrollTopOffset = $$props.scrollTopOffset);
		if ("$$scope" in $$props) $$invalidate(6, $$scope = $$props.$$scope);
	};

	return [
		root,
		historyType,
		titleSuffix,
		scrollTopOffset,
		__ref,
		getWebComponent,
		$$scope,
		slots,
		stencil_router_binding
	];
}

class StencilRouter extends SvelteComponent {
  $$prop_def: StencilRouterProps;
  $$events_def: StencilRouterEvents;
  $$slot_def: StencilRouterSlots;

  $on<K extends keyof StencilRouterEvents>(type: K, callback: (e: StencilRouterEvents[K]) => any): () => void {
	  return super.$on(type, callback);
	}

  $set($$props: Partial<StencilRouterProps>): void {
	  super.$set($$props);
	}

	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			root: 0,
			historyType: 1,
			titleSuffix: 2,
			scrollTopOffset: 3,
			getWebComponent: 5
		});
	}

	get getWebComponent(): HTMLStencilRouterElement | undefined {
		return this.$$.ctx[5];
	}
}

export default StencilRouter;