/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { Components, JSX } from 'component-library';


interface SntPaneProps {
  
  /**  */
  collapsed?: Components.SntPane["collapsed"]
  
  /**  */
  animated?: Components.SntPane["animated"]
  
  /**  */
  styleClasses?: Components.SntPane["styleClasses"]
}

interface SntPaneEvents {
  
}

interface SntPaneSlots {
  default: any
}
  
/* generated by Svelte v3.35.0 */
import {
	SvelteComponent,
	binding_callbacks,
	create_slot,
	detach,
	element,
	init,
	insert,
	safe_not_equal,
	set_custom_element_data,
	transition_in,
	transition_out,
	update_slot
} from "svelte/internal";

import { createEventDispatcher, onMount } from "svelte";

function create_fragment(ctx) {
	let snt_pane;
	let current;
	const default_slot_template = /*#slots*/ ctx[7].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[6], null);

	return {
		c() {
			snt_pane = element("snt-pane");
			if (default_slot) default_slot.c();
			set_custom_element_data(snt_pane, "collapsed", /*collapsed*/ ctx[0]);
			set_custom_element_data(snt_pane, "animated", /*animated*/ ctx[1]);
			set_custom_element_data(snt_pane, "style-classes", /*styleClasses*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, snt_pane, anchor);

			if (default_slot) {
				default_slot.m(snt_pane, null);
			}

			/*snt_pane_binding*/ ctx[8](snt_pane);
			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 64) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[6], dirty, null, null);
				}
			}

			if (!current || dirty & /*collapsed*/ 1) {
				set_custom_element_data(snt_pane, "collapsed", /*collapsed*/ ctx[0]);
			}

			if (!current || dirty & /*animated*/ 2) {
				set_custom_element_data(snt_pane, "animated", /*animated*/ ctx[1]);
			}

			if (!current || dirty & /*styleClasses*/ 4) {
				set_custom_element_data(snt_pane, "style-classes", /*styleClasses*/ ctx[2]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(snt_pane);
			if (default_slot) default_slot.d(detaching);
			/*snt_pane_binding*/ ctx[8](null);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let __ref;
	let __mounted = false;
	const dispatch = createEventDispatcher();
	let { collapsed = undefined } = $$props;
	let { animated = undefined } = $$props;
	let { styleClasses = undefined } = $$props;
	const toggleCollapsed = (...args) => __ref.toggleCollapsed(...args);
	const getWebComponent = () => __ref;

	onMount(() => {
		__mounted = true;
	});

	const setProp = (prop, value) => {
		if (__ref) $$invalidate(3, __ref[prop] = value, __ref);
	};

	const onEvent = e => {
		e.stopPropagation();
		dispatch(e.type, e.detail);
	};

	function snt_pane_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			__ref = $$value;
			$$invalidate(3, __ref);
		});
	}

	$$self.$$set = $$props => {
		if ("collapsed" in $$props) $$invalidate(0, collapsed = $$props.collapsed);
		if ("animated" in $$props) $$invalidate(1, animated = $$props.animated);
		if ("styleClasses" in $$props) $$invalidate(2, styleClasses = $$props.styleClasses);
		if ("$$scope" in $$props) $$invalidate(6, $$scope = $$props.$$scope);
	};

	return [
		collapsed,
		animated,
		styleClasses,
		__ref,
		toggleCollapsed,
		getWebComponent,
		$$scope,
		slots,
		snt_pane_binding
	];
}

class SntPane extends SvelteComponent {
  $$prop_def: SntPaneProps;
  $$events_def: SntPaneEvents;
  $$slot_def: SntPaneSlots;

  $on<K extends keyof SntPaneEvents>(type: K, callback: (e: SntPaneEvents[K]) => any): () => void {
	  return super.$on(type, callback);
	}

  $set($$props: Partial<SntPaneProps>): void {
	  super.$set($$props);
	}

	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			collapsed: 0,
			animated: 1,
			styleClasses: 2,
			toggleCollapsed: 4,
			getWebComponent: 5
		});
	}

	
  /**  */
 get toggleCollapsed(): Components.SntPane["toggleCollapsed"] {
		return this.$$.ctx[4];
	}

	get getWebComponent(): HTMLSntPaneElement | undefined {
		return this.$$.ctx[5];
	}
}

export default SntPane;