/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { Components, JSX } from 'component-library';


interface SntModalProps {
  
  /**  */
  shown?: Components.SntModal["shown"]
  
  /**  */
  modalTitle?: Components.SntModal["modalTitle"]
  
  /**  */
  options?: Components.SntModal["options"]
  
  /**  */
  styleClasses?: Components.SntModal["styleClasses"]
  
  /**  */
  languageString?: Components.SntModal["languageString"]
}

interface SntModalEvents {
  
  /**  */
  modalEvent: Parameters<JSX.SntModal["onModalEvent"]>[0]
}

interface SntModalSlots {
  default: any
}
  
/* generated by Svelte v3.35.0 */
import {
	SvelteComponent,
	binding_callbacks,
	create_slot,
	detach,
	element,
	init,
	insert,
	listen,
	safe_not_equal,
	set_custom_element_data,
	transition_in,
	transition_out,
	update_slot
} from "svelte/internal";

import { createEventDispatcher, onMount } from "svelte";

function create_fragment(ctx) {
	let snt_modal;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[14].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[13], null);

	return {
		c() {
			snt_modal = element("snt-modal");
			if (default_slot) default_slot.c();
			set_custom_element_data(snt_modal, "shown", /*shown*/ ctx[0]);
			set_custom_element_data(snt_modal, "modal-title", /*modalTitle*/ ctx[1]);
			set_custom_element_data(snt_modal, "style-classes", /*styleClasses*/ ctx[2]);
			set_custom_element_data(snt_modal, "language-string", /*languageString*/ ctx[3]);
		},
		m(target, anchor) {
			insert(target, snt_modal, anchor);

			if (default_slot) {
				default_slot.m(snt_modal, null);
			}

			/*snt_modal_binding*/ ctx[15](snt_modal);
			current = true;

			if (!mounted) {
				dispose = listen(snt_modal, "modalEvent", /*onEvent*/ ctx[5]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 8192) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[13], dirty, null, null);
				}
			}

			if (!current || dirty & /*shown*/ 1) {
				set_custom_element_data(snt_modal, "shown", /*shown*/ ctx[0]);
			}

			if (!current || dirty & /*modalTitle*/ 2) {
				set_custom_element_data(snt_modal, "modal-title", /*modalTitle*/ ctx[1]);
			}

			if (!current || dirty & /*styleClasses*/ 4) {
				set_custom_element_data(snt_modal, "style-classes", /*styleClasses*/ ctx[2]);
			}

			if (!current || dirty & /*languageString*/ 8) {
				set_custom_element_data(snt_modal, "language-string", /*languageString*/ ctx[3]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(snt_modal);
			if (default_slot) default_slot.d(detaching);
			/*snt_modal_binding*/ ctx[15](null);
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let __ref;
	let __mounted = false;
	const dispatch = createEventDispatcher();
	let { shown = undefined } = $$props;
	let { modalTitle = undefined } = $$props;
	let { options = undefined } = $$props;
	let { styleClasses = undefined } = $$props;
	let { languageString = undefined } = $$props;
	const show = (...args) => __ref.show(...args);
	const hide = (...args) => __ref.hide(...args);
	const toggle = (...args) => __ref.toggle(...args);
	const isShown = (...args) => __ref.isShown(...args);
	const getWebComponent = () => __ref;

	onMount(() => {
		$$invalidate(12, __mounted = true);
	});

	const setProp = (prop, value) => {
		if (__ref) $$invalidate(4, __ref[prop] = value, __ref);
	};

	const onEvent = e => {
		e.stopPropagation();
		dispatch(e.type, e.detail);
	};

	function snt_modal_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			__ref = $$value;
			$$invalidate(4, __ref);
		});
	}

	$$self.$$set = $$props => {
		if ("shown" in $$props) $$invalidate(0, shown = $$props.shown);
		if ("modalTitle" in $$props) $$invalidate(1, modalTitle = $$props.modalTitle);
		if ("options" in $$props) $$invalidate(6, options = $$props.options);
		if ("styleClasses" in $$props) $$invalidate(2, styleClasses = $$props.styleClasses);
		if ("languageString" in $$props) $$invalidate(3, languageString = $$props.languageString);
		if ("$$scope" in $$props) $$invalidate(13, $$scope = $$props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*__mounted, options*/ 4160) {
			$: if (__mounted) setProp("options", options);
		}
	};

	return [
		shown,
		modalTitle,
		styleClasses,
		languageString,
		__ref,
		onEvent,
		options,
		show,
		hide,
		toggle,
		isShown,
		getWebComponent,
		__mounted,
		$$scope,
		slots,
		snt_modal_binding
	];
}

class SntModal extends SvelteComponent {
  $$prop_def: SntModalProps;
  $$events_def: SntModalEvents;
  $$slot_def: SntModalSlots;

  $on<K extends keyof SntModalEvents>(type: K, callback: (e: SntModalEvents[K]) => any): () => void {
	  return super.$on(type, callback);
	}

  $set($$props: Partial<SntModalProps>): void {
	  super.$set($$props);
	}

	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			shown: 0,
			modalTitle: 1,
			options: 6,
			styleClasses: 2,
			languageString: 3,
			show: 7,
			hide: 8,
			toggle: 9,
			isShown: 10,
			getWebComponent: 11
		});
	}

	
  /**  */
 get show(): Components.SntModal["show"] {
		return this.$$.ctx[7];
	}

	
  /**  */
 get hide(): Components.SntModal["hide"] {
		return this.$$.ctx[8];
	}

	
  /**  */
 get toggle(): Components.SntModal["toggle"] {
		return this.$$.ctx[9];
	}

	
  /**  */
 get isShown(): Components.SntModal["isShown"] {
		return this.$$.ctx[10];
	}

	get getWebComponent(): HTMLSntModalElement | undefined {
		return this.$$.ctx[11];
	}
}

export default SntModal;