/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { Components, JSX } from 'component-library';


interface SntSourceLinkProps {
  
  /**  */
  href?: Components.SntSourceLink["href"]
  
  /**  */
  target?: Components.SntSourceLink["target"]
  
  /**  */
  ariaLabel?: Components.SntSourceLink["ariaLabel"]
  
  /**  */
  rel?: Components.SntSourceLink["rel"]
}

interface SntSourceLinkEvents {
  
}

interface SntSourceLinkSlots {
  default: any
}
  
/* generated by Svelte v3.35.0 */
import {
	SvelteComponent,
	binding_callbacks,
	create_slot,
	detach,
	element,
	init,
	insert,
	safe_not_equal,
	set_custom_element_data,
	transition_in,
	transition_out,
	update_slot
} from "svelte/internal";

import { createEventDispatcher, onMount } from "svelte";

function create_fragment(ctx) {
	let snt_source_link;
	let current;
	const default_slot_template = /*#slots*/ ctx[7].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[6], null);

	return {
		c() {
			snt_source_link = element("snt-source-link");
			if (default_slot) default_slot.c();
			set_custom_element_data(snt_source_link, "href", /*href*/ ctx[0]);
			set_custom_element_data(snt_source_link, "target", /*target*/ ctx[1]);
			set_custom_element_data(snt_source_link, "aria-label", /*ariaLabel*/ ctx[2]);
			set_custom_element_data(snt_source_link, "rel", /*rel*/ ctx[3]);
		},
		m(target, anchor) {
			insert(target, snt_source_link, anchor);

			if (default_slot) {
				default_slot.m(snt_source_link, null);
			}

			/*snt_source_link_binding*/ ctx[8](snt_source_link);
			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 64) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[6], dirty, null, null);
				}
			}

			if (!current || dirty & /*href*/ 1) {
				set_custom_element_data(snt_source_link, "href", /*href*/ ctx[0]);
			}

			if (!current || dirty & /*target*/ 2) {
				set_custom_element_data(snt_source_link, "target", /*target*/ ctx[1]);
			}

			if (!current || dirty & /*ariaLabel*/ 4) {
				set_custom_element_data(snt_source_link, "aria-label", /*ariaLabel*/ ctx[2]);
			}

			if (!current || dirty & /*rel*/ 8) {
				set_custom_element_data(snt_source_link, "rel", /*rel*/ ctx[3]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(snt_source_link);
			if (default_slot) default_slot.d(detaching);
			/*snt_source_link_binding*/ ctx[8](null);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let __ref;
	let __mounted = false;
	const dispatch = createEventDispatcher();
	let { href = undefined } = $$props;
	let { target = undefined } = $$props;
	let { ariaLabel = undefined } = $$props;
	let { rel = undefined } = $$props;
	const getWebComponent = () => __ref;

	onMount(() => {
		__mounted = true;
	});

	const setProp = (prop, value) => {
		if (__ref) $$invalidate(4, __ref[prop] = value, __ref);
	};

	const onEvent = e => {
		e.stopPropagation();
		dispatch(e.type, e.detail);
	};

	function snt_source_link_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			__ref = $$value;
			$$invalidate(4, __ref);
		});
	}

	$$self.$$set = $$props => {
		if ("href" in $$props) $$invalidate(0, href = $$props.href);
		if ("target" in $$props) $$invalidate(1, target = $$props.target);
		if ("ariaLabel" in $$props) $$invalidate(2, ariaLabel = $$props.ariaLabel);
		if ("rel" in $$props) $$invalidate(3, rel = $$props.rel);
		if ("$$scope" in $$props) $$invalidate(6, $$scope = $$props.$$scope);
	};

	return [
		href,
		target,
		ariaLabel,
		rel,
		__ref,
		getWebComponent,
		$$scope,
		slots,
		snt_source_link_binding
	];
}

class SntSourceLink extends SvelteComponent {
  $$prop_def: SntSourceLinkProps;
  $$events_def: SntSourceLinkEvents;
  $$slot_def: SntSourceLinkSlots;

  $on<K extends keyof SntSourceLinkEvents>(type: K, callback: (e: SntSourceLinkEvents[K]) => any): () => void {
	  return super.$on(type, callback);
	}

  $set($$props: Partial<SntSourceLinkProps>): void {
	  super.$set($$props);
	}

	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			href: 0,
			target: 1,
			ariaLabel: 2,
			rel: 3,
			getWebComponent: 5
		});
	}

	get getWebComponent(): HTMLSntSourceLinkElement | undefined {
		return this.$$.ctx[5];
	}
}

export default SntSourceLink;