/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { Components, JSX } from 'component-library';


interface SntDropdownProps {
  
  /**  */
  opened?: Components.SntDropdown["opened"]
  
  /**  */
  placeholderText?: Components.SntDropdown["placeholderText"]
  
  /**  */
  labelText?: Components.SntDropdown["labelText"]
  
  /**  */
  itemConfiguration?: Components.SntDropdown["itemConfiguration"]
  
  /**  */
  required?: Components.SntDropdown["required"]
  
  /**  */
  name?: Components.SntDropdown["name"]
}

interface SntDropdownEvents {
  
  /**  */
  dropdownSelectionChange: Parameters<JSX.SntDropdown["onDropdownSelectionChange"]>[0]
}

interface SntDropdownSlots {
  default: any
}
  
/* generated by Svelte v3.35.0 */
import {
	SvelteComponent,
	binding_callbacks,
	create_slot,
	detach,
	element,
	init,
	insert,
	listen,
	safe_not_equal,
	set_custom_element_data,
	transition_in,
	transition_out,
	update_slot
} from "svelte/internal";

import { createEventDispatcher, onMount } from "svelte";

function create_fragment(ctx) {
	let snt_dropdown;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[19].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[18], null);

	return {
		c() {
			snt_dropdown = element("snt-dropdown");
			if (default_slot) default_slot.c();
			set_custom_element_data(snt_dropdown, "opened", /*opened*/ ctx[0]);
			set_custom_element_data(snt_dropdown, "placeholder-text", /*placeholderText*/ ctx[1]);
			set_custom_element_data(snt_dropdown, "label-text", /*labelText*/ ctx[2]);
			set_custom_element_data(snt_dropdown, "required", /*required*/ ctx[3]);
			set_custom_element_data(snt_dropdown, "name", /*name*/ ctx[4]);
		},
		m(target, anchor) {
			insert(target, snt_dropdown, anchor);

			if (default_slot) {
				default_slot.m(snt_dropdown, null);
			}

			/*snt_dropdown_binding*/ ctx[20](snt_dropdown);
			current = true;

			if (!mounted) {
				dispose = listen(snt_dropdown, "dropdownSelectionChange", /*onEvent*/ ctx[6]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 262144) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[18], dirty, null, null);
				}
			}

			if (!current || dirty & /*opened*/ 1) {
				set_custom_element_data(snt_dropdown, "opened", /*opened*/ ctx[0]);
			}

			if (!current || dirty & /*placeholderText*/ 2) {
				set_custom_element_data(snt_dropdown, "placeholder-text", /*placeholderText*/ ctx[1]);
			}

			if (!current || dirty & /*labelText*/ 4) {
				set_custom_element_data(snt_dropdown, "label-text", /*labelText*/ ctx[2]);
			}

			if (!current || dirty & /*required*/ 8) {
				set_custom_element_data(snt_dropdown, "required", /*required*/ ctx[3]);
			}

			if (!current || dirty & /*name*/ 16) {
				set_custom_element_data(snt_dropdown, "name", /*name*/ ctx[4]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(snt_dropdown);
			if (default_slot) default_slot.d(detaching);
			/*snt_dropdown_binding*/ ctx[20](null);
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let __ref;
	let __mounted = false;
	const dispatch = createEventDispatcher();
	let { opened = undefined } = $$props;
	let { placeholderText = undefined } = $$props;
	let { labelText } = $$props;
	let { itemConfiguration = undefined } = $$props;
	let { required = undefined } = $$props;
	let { name = undefined } = $$props;
	const open = (...args) => __ref.open(...args);
	const close = (...args) => __ref.close(...args);
	const toggle = (...args) => __ref.toggle(...args);
	const isOpen = (...args) => __ref.isOpen(...args);
	const setValue = (...args) => __ref.setValue(...args);
	const getValue = (...args) => __ref.getValue(...args);
	const setIndex = (...args) => __ref.setIndex(...args);
	const getIndex = (...args) => __ref.getIndex(...args);
	const getWebComponent = () => __ref;

	onMount(() => {
		$$invalidate(17, __mounted = true);
	});

	const setProp = (prop, value) => {
		if (__ref) $$invalidate(5, __ref[prop] = value, __ref);
	};

	const onEvent = e => {
		e.stopPropagation();
		dispatch(e.type, e.detail);
	};

	function snt_dropdown_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			__ref = $$value;
			$$invalidate(5, __ref);
		});
	}

	$$self.$$set = $$props => {
		if ("opened" in $$props) $$invalidate(0, opened = $$props.opened);
		if ("placeholderText" in $$props) $$invalidate(1, placeholderText = $$props.placeholderText);
		if ("labelText" in $$props) $$invalidate(2, labelText = $$props.labelText);
		if ("itemConfiguration" in $$props) $$invalidate(7, itemConfiguration = $$props.itemConfiguration);
		if ("required" in $$props) $$invalidate(3, required = $$props.required);
		if ("name" in $$props) $$invalidate(4, name = $$props.name);
		if ("$$scope" in $$props) $$invalidate(18, $$scope = $$props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*__mounted, itemConfiguration*/ 131200) {
			$: if (__mounted) setProp("itemConfiguration", itemConfiguration);
		}
	};

	return [
		opened,
		placeholderText,
		labelText,
		required,
		name,
		__ref,
		onEvent,
		itemConfiguration,
		open,
		close,
		toggle,
		isOpen,
		setValue,
		getValue,
		setIndex,
		getIndex,
		getWebComponent,
		__mounted,
		$$scope,
		slots,
		snt_dropdown_binding
	];
}

class SntDropdown extends SvelteComponent {
  $$prop_def: SntDropdownProps;
  $$events_def: SntDropdownEvents;
  $$slot_def: SntDropdownSlots;

  $on<K extends keyof SntDropdownEvents>(type: K, callback: (e: SntDropdownEvents[K]) => any): () => void {
	  return super.$on(type, callback);
	}

  $set($$props: Partial<SntDropdownProps>): void {
	  super.$set($$props);
	}

	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			opened: 0,
			placeholderText: 1,
			labelText: 2,
			itemConfiguration: 7,
			required: 3,
			name: 4,
			open: 8,
			close: 9,
			toggle: 10,
			isOpen: 11,
			setValue: 12,
			getValue: 13,
			setIndex: 14,
			getIndex: 15,
			getWebComponent: 16
		});
	}

	
  /**  */
 get open(): Components.SntDropdown["open"] {
		return this.$$.ctx[8];
	}

	
  /**  */
 get close(): Components.SntDropdown["close"] {
		return this.$$.ctx[9];
	}

	
  /**  */
 get toggle(): Components.SntDropdown["toggle"] {
		return this.$$.ctx[10];
	}

	
  /**  */
 get isOpen(): Components.SntDropdown["isOpen"] {
		return this.$$.ctx[11];
	}

	
  /**  */
 get setValue(): Components.SntDropdown["setValue"] {
		return this.$$.ctx[12];
	}

	
  /**  */
 get getValue(): Components.SntDropdown["getValue"] {
		return this.$$.ctx[13];
	}

	
  /**  */
 get setIndex(): Components.SntDropdown["setIndex"] {
		return this.$$.ctx[14];
	}

	
  /**  */
 get getIndex(): Components.SntDropdown["getIndex"] {
		return this.$$.ctx[15];
	}

	get getWebComponent(): HTMLSntDropdownElement | undefined {
		return this.$$.ctx[16];
	}
}

export default SntDropdown;