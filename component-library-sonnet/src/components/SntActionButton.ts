/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { Components, JSX } from 'component-library';


interface SntActionButtonProps {
  
  /**  */
  actionReference?: Components.SntActionButton["actionReference"]
  
  /**  */
  actionData?: Components.SntActionButton["actionData"]
  
  /**  */
  iconClassName?: Components.SntActionButton["iconClassName"]
  
  /**  */
  linkTitle?: Components.SntActionButton["linkTitle"]
  
  /**  */
  styleClasses?: Components.SntActionButton["styleClasses"]
  
  /**  */
  buttonId?: Components.SntActionButton["buttonId"]
}

interface SntActionButtonEvents {
  
}

interface SntActionButtonSlots {
  default: any
}
  
/* generated by Svelte v3.35.0 */
import {
	SvelteComponent,
	binding_callbacks,
	create_slot,
	detach,
	element,
	init,
	insert,
	safe_not_equal,
	set_custom_element_data,
	transition_in,
	transition_out,
	update_slot
} from "svelte/internal";

import { createEventDispatcher, onMount } from "svelte";

function create_fragment(ctx) {
	let snt_action_button;
	let current;
	const default_slot_template = /*#slots*/ ctx[10].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[9], null);

	return {
		c() {
			snt_action_button = element("snt-action-button");
			if (default_slot) default_slot.c();
			set_custom_element_data(snt_action_button, "action-reference", /*actionReference*/ ctx[0]);
			set_custom_element_data(snt_action_button, "action-data", /*actionData*/ ctx[1]);
			set_custom_element_data(snt_action_button, "icon-class-name", /*iconClassName*/ ctx[2]);
			set_custom_element_data(snt_action_button, "link-title", /*linkTitle*/ ctx[3]);
			set_custom_element_data(snt_action_button, "style-classes", /*styleClasses*/ ctx[4]);
			set_custom_element_data(snt_action_button, "button-id", /*buttonId*/ ctx[5]);
		},
		m(target, anchor) {
			insert(target, snt_action_button, anchor);

			if (default_slot) {
				default_slot.m(snt_action_button, null);
			}

			/*snt_action_button_binding*/ ctx[11](snt_action_button);
			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 512) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[9], dirty, null, null);
				}
			}

			if (!current || dirty & /*actionReference*/ 1) {
				set_custom_element_data(snt_action_button, "action-reference", /*actionReference*/ ctx[0]);
			}

			if (!current || dirty & /*actionData*/ 2) {
				set_custom_element_data(snt_action_button, "action-data", /*actionData*/ ctx[1]);
			}

			if (!current || dirty & /*iconClassName*/ 4) {
				set_custom_element_data(snt_action_button, "icon-class-name", /*iconClassName*/ ctx[2]);
			}

			if (!current || dirty & /*linkTitle*/ 8) {
				set_custom_element_data(snt_action_button, "link-title", /*linkTitle*/ ctx[3]);
			}

			if (!current || dirty & /*styleClasses*/ 16) {
				set_custom_element_data(snt_action_button, "style-classes", /*styleClasses*/ ctx[4]);
			}

			if (!current || dirty & /*buttonId*/ 32) {
				set_custom_element_data(snt_action_button, "button-id", /*buttonId*/ ctx[5]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(snt_action_button);
			if (default_slot) default_slot.d(detaching);
			/*snt_action_button_binding*/ ctx[11](null);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let __ref;
	let __mounted = false;
	const dispatch = createEventDispatcher();
	let { actionReference = undefined } = $$props;
	let { actionData = undefined } = $$props;
	let { iconClassName = undefined } = $$props;
	let { linkTitle = undefined } = $$props;
	let { styleClasses = undefined } = $$props;
	let { buttonId = undefined } = $$props;
	const getEventConfiguration = (...args) => __ref.getEventConfiguration(...args);
	const getWebComponent = () => __ref;

	onMount(() => {
		__mounted = true;
	});

	const setProp = (prop, value) => {
		if (__ref) $$invalidate(6, __ref[prop] = value, __ref);
	};

	const onEvent = e => {
		e.stopPropagation();
		dispatch(e.type, e.detail);
	};

	function snt_action_button_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			__ref = $$value;
			$$invalidate(6, __ref);
		});
	}

	$$self.$$set = $$props => {
		if ("actionReference" in $$props) $$invalidate(0, actionReference = $$props.actionReference);
		if ("actionData" in $$props) $$invalidate(1, actionData = $$props.actionData);
		if ("iconClassName" in $$props) $$invalidate(2, iconClassName = $$props.iconClassName);
		if ("linkTitle" in $$props) $$invalidate(3, linkTitle = $$props.linkTitle);
		if ("styleClasses" in $$props) $$invalidate(4, styleClasses = $$props.styleClasses);
		if ("buttonId" in $$props) $$invalidate(5, buttonId = $$props.buttonId);
		if ("$$scope" in $$props) $$invalidate(9, $$scope = $$props.$$scope);
	};

	return [
		actionReference,
		actionData,
		iconClassName,
		linkTitle,
		styleClasses,
		buttonId,
		__ref,
		getEventConfiguration,
		getWebComponent,
		$$scope,
		slots,
		snt_action_button_binding
	];
}

class SntActionButton extends SvelteComponent {
  $$prop_def: SntActionButtonProps;
  $$events_def: SntActionButtonEvents;
  $$slot_def: SntActionButtonSlots;

  $on<K extends keyof SntActionButtonEvents>(type: K, callback: (e: SntActionButtonEvents[K]) => any): () => void {
	  return super.$on(type, callback);
	}

  $set($$props: Partial<SntActionButtonProps>): void {
	  super.$set($$props);
	}

	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			actionReference: 0,
			actionData: 1,
			iconClassName: 2,
			linkTitle: 3,
			styleClasses: 4,
			buttonId: 5,
			getEventConfiguration: 7,
			getWebComponent: 8
		});
	}

	
  /**  */
 get getEventConfiguration(): Components.SntActionButton["getEventConfiguration"] {
		return this.$$.ctx[7];
	}

	get getWebComponent(): HTMLSntActionButtonElement | undefined {
		return this.$$.ctx[8];
	}
}

export default SntActionButton;