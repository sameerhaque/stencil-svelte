/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { Components, JSX } from 'component-library';


interface SntEnhancedButtonProps {
  
  /**  */
  styleClasses?: Components.SntEnhancedButton["styleClasses"]
  
  /**  */
  discountText?: Components.SntEnhancedButton["discountText"]
  
  /**  */
  ctaText?: Components.SntEnhancedButton["ctaText"]
  
  /**  */
  href?: Components.SntEnhancedButton["href"]
  
  /**  */
  target?: Components.SntEnhancedButton["target"]
  
  /**  */
  ariaLabel?: Components.SntEnhancedButton["ariaLabel"]
  
  /**  */
  leftIconSources?: Components.SntEnhancedButton["leftIconSources"]
  
  /**  */
  rightIconSources?: Components.SntEnhancedButton["rightIconSources"]
  
  /**  */
  linkId?: Components.SntEnhancedButton["linkId"]
}

interface SntEnhancedButtonEvents {
  
  /**  */
  sntButtonClick: Parameters<JSX.SntEnhancedButton["onSntButtonClick"]>[0]
  
  /**  */
  sntButtonKeyDown: Parameters<JSX.SntEnhancedButton["onSntButtonKeyDown"]>[0]
}

interface SntEnhancedButtonSlots {
  default: any
}
  
/* generated by Svelte v3.35.0 */
import {
	SvelteComponent,
	binding_callbacks,
	create_slot,
	detach,
	element,
	init,
	insert,
	listen,
	run_all,
	safe_not_equal,
	set_custom_element_data,
	transition_in,
	transition_out,
	update_slot
} from "svelte/internal";

import { createEventDispatcher, onMount } from "svelte";

function create_fragment(ctx) {
	let snt_enhanced_button;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[13].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[12], null);

	return {
		c() {
			snt_enhanced_button = element("snt-enhanced-button");
			if (default_slot) default_slot.c();
			set_custom_element_data(snt_enhanced_button, "style-classes", /*styleClasses*/ ctx[0]);
			set_custom_element_data(snt_enhanced_button, "discount-text", /*discountText*/ ctx[1]);
			set_custom_element_data(snt_enhanced_button, "cta-text", /*ctaText*/ ctx[2]);
			set_custom_element_data(snt_enhanced_button, "href", /*href*/ ctx[3]);
			set_custom_element_data(snt_enhanced_button, "target", /*target*/ ctx[4]);
			set_custom_element_data(snt_enhanced_button, "aria-label", /*ariaLabel*/ ctx[5]);
			set_custom_element_data(snt_enhanced_button, "left-icon-sources", /*leftIconSources*/ ctx[6]);
			set_custom_element_data(snt_enhanced_button, "right-icon-sources", /*rightIconSources*/ ctx[7]);
			set_custom_element_data(snt_enhanced_button, "link-id", /*linkId*/ ctx[8]);
		},
		m(target, anchor) {
			insert(target, snt_enhanced_button, anchor);

			if (default_slot) {
				default_slot.m(snt_enhanced_button, null);
			}

			/*snt_enhanced_button_binding*/ ctx[14](snt_enhanced_button);
			current = true;

			if (!mounted) {
				dispose = [
					listen(snt_enhanced_button, "sntButtonClick", /*onEvent*/ ctx[10]),
					listen(snt_enhanced_button, "sntButtonKeyDown", /*onEvent*/ ctx[10])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 4096) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[12], dirty, null, null);
				}
			}

			if (!current || dirty & /*styleClasses*/ 1) {
				set_custom_element_data(snt_enhanced_button, "style-classes", /*styleClasses*/ ctx[0]);
			}

			if (!current || dirty & /*discountText*/ 2) {
				set_custom_element_data(snt_enhanced_button, "discount-text", /*discountText*/ ctx[1]);
			}

			if (!current || dirty & /*ctaText*/ 4) {
				set_custom_element_data(snt_enhanced_button, "cta-text", /*ctaText*/ ctx[2]);
			}

			if (!current || dirty & /*href*/ 8) {
				set_custom_element_data(snt_enhanced_button, "href", /*href*/ ctx[3]);
			}

			if (!current || dirty & /*target*/ 16) {
				set_custom_element_data(snt_enhanced_button, "target", /*target*/ ctx[4]);
			}

			if (!current || dirty & /*ariaLabel*/ 32) {
				set_custom_element_data(snt_enhanced_button, "aria-label", /*ariaLabel*/ ctx[5]);
			}

			if (!current || dirty & /*leftIconSources*/ 64) {
				set_custom_element_data(snt_enhanced_button, "left-icon-sources", /*leftIconSources*/ ctx[6]);
			}

			if (!current || dirty & /*rightIconSources*/ 128) {
				set_custom_element_data(snt_enhanced_button, "right-icon-sources", /*rightIconSources*/ ctx[7]);
			}

			if (!current || dirty & /*linkId*/ 256) {
				set_custom_element_data(snt_enhanced_button, "link-id", /*linkId*/ ctx[8]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(snt_enhanced_button);
			if (default_slot) default_slot.d(detaching);
			/*snt_enhanced_button_binding*/ ctx[14](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let __ref;
	let __mounted = false;
	const dispatch = createEventDispatcher();
	let { styleClasses = undefined } = $$props;
	let { discountText = undefined } = $$props;
	let { ctaText = undefined } = $$props;
	let { href = undefined } = $$props;
	let { target = undefined } = $$props;
	let { ariaLabel = undefined } = $$props;
	let { leftIconSources = undefined } = $$props;
	let { rightIconSources = undefined } = $$props;
	let { linkId = undefined } = $$props;
	const getWebComponent = () => __ref;

	onMount(() => {
		__mounted = true;
	});

	const setProp = (prop, value) => {
		if (__ref) $$invalidate(9, __ref[prop] = value, __ref);
	};

	const onEvent = e => {
		e.stopPropagation();
		dispatch(e.type, e.detail);
	};

	function snt_enhanced_button_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			__ref = $$value;
			$$invalidate(9, __ref);
		});
	}

	$$self.$$set = $$props => {
		if ("styleClasses" in $$props) $$invalidate(0, styleClasses = $$props.styleClasses);
		if ("discountText" in $$props) $$invalidate(1, discountText = $$props.discountText);
		if ("ctaText" in $$props) $$invalidate(2, ctaText = $$props.ctaText);
		if ("href" in $$props) $$invalidate(3, href = $$props.href);
		if ("target" in $$props) $$invalidate(4, target = $$props.target);
		if ("ariaLabel" in $$props) $$invalidate(5, ariaLabel = $$props.ariaLabel);
		if ("leftIconSources" in $$props) $$invalidate(6, leftIconSources = $$props.leftIconSources);
		if ("rightIconSources" in $$props) $$invalidate(7, rightIconSources = $$props.rightIconSources);
		if ("linkId" in $$props) $$invalidate(8, linkId = $$props.linkId);
		if ("$$scope" in $$props) $$invalidate(12, $$scope = $$props.$$scope);
	};

	return [
		styleClasses,
		discountText,
		ctaText,
		href,
		target,
		ariaLabel,
		leftIconSources,
		rightIconSources,
		linkId,
		__ref,
		onEvent,
		getWebComponent,
		$$scope,
		slots,
		snt_enhanced_button_binding
	];
}

class SntEnhancedButton extends SvelteComponent {
  $$prop_def: SntEnhancedButtonProps;
  $$events_def: SntEnhancedButtonEvents;
  $$slot_def: SntEnhancedButtonSlots;

  $on<K extends keyof SntEnhancedButtonEvents>(type: K, callback: (e: SntEnhancedButtonEvents[K]) => any): () => void {
	  return super.$on(type, callback);
	}

  $set($$props: Partial<SntEnhancedButtonProps>): void {
	  super.$set($$props);
	}

	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			styleClasses: 0,
			discountText: 1,
			ctaText: 2,
			href: 3,
			target: 4,
			ariaLabel: 5,
			leftIconSources: 6,
			rightIconSources: 7,
			linkId: 8,
			getWebComponent: 11
		});
	}

	get getWebComponent(): HTMLSntEnhancedButtonElement | undefined {
		return this.$$.ctx[11];
	}
}

export default SntEnhancedButton;