/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { Components, JSX } from 'component-library';


interface SntFormProps {
  
  /**  */
  text?: Components.SntForm["text"]
  
  /**  */
  submitCallBackhandler?: Components.SntForm["submitCallBackhandler"]
}

interface SntFormEvents {
  
  /**  */
  formSubmit: Parameters<JSX.SntForm["onFormSubmit"]>[0]
}

interface SntFormSlots {
  default: any
}
  
/* generated by Svelte v3.35.0 */
import {
	SvelteComponent,
	binding_callbacks,
	create_slot,
	detach,
	element,
	init,
	insert,
	listen,
	safe_not_equal,
	set_custom_element_data,
	transition_in,
	transition_out,
	update_slot
} from "svelte/internal";

import { createEventDispatcher, onMount } from "svelte";

function create_fragment(ctx) {
	let snt_form;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[10].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[9], null);

	return {
		c() {
			snt_form = element("snt-form");
			if (default_slot) default_slot.c();
			set_custom_element_data(snt_form, "text", /*text*/ ctx[0]);
			set_custom_element_data(snt_form, "submit-call-backhandler", /*submitCallBackhandler*/ ctx[1]);
		},
		m(target, anchor) {
			insert(target, snt_form, anchor);

			if (default_slot) {
				default_slot.m(snt_form, null);
			}

			/*snt_form_binding*/ ctx[11](snt_form);
			current = true;

			if (!mounted) {
				dispose = listen(snt_form, "formSubmit", /*onEvent*/ ctx[3]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 512) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[9], dirty, null, null);
				}
			}

			if (!current || dirty & /*text*/ 1) {
				set_custom_element_data(snt_form, "text", /*text*/ ctx[0]);
			}

			if (!current || dirty & /*submitCallBackhandler*/ 2) {
				set_custom_element_data(snt_form, "submit-call-backhandler", /*submitCallBackhandler*/ ctx[1]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(snt_form);
			if (default_slot) default_slot.d(detaching);
			/*snt_form_binding*/ ctx[11](null);
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let __ref;
	let __mounted = false;
	const dispatch = createEventDispatcher();
	let { text = undefined } = $$props;
	let { submitCallBackhandler = undefined } = $$props;
	const openErrorModal = (...args) => __ref.openErrorModal(...args);
	const openSuccessModal = (...args) => __ref.openSuccessModal(...args);
	const reset = (...args) => __ref.reset(...args);
	const getData = (...args) => __ref.getData(...args);
	const getWebComponent = () => __ref;

	onMount(() => {
		__mounted = true;
	});

	const setProp = (prop, value) => {
		if (__ref) $$invalidate(2, __ref[prop] = value, __ref);
	};

	const onEvent = e => {
		e.stopPropagation();
		dispatch(e.type, e.detail);
	};

	function snt_form_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			__ref = $$value;
			$$invalidate(2, __ref);
		});
	}

	$$self.$$set = $$props => {
		if ("text" in $$props) $$invalidate(0, text = $$props.text);
		if ("submitCallBackhandler" in $$props) $$invalidate(1, submitCallBackhandler = $$props.submitCallBackhandler);
		if ("$$scope" in $$props) $$invalidate(9, $$scope = $$props.$$scope);
	};

	return [
		text,
		submitCallBackhandler,
		__ref,
		onEvent,
		openErrorModal,
		openSuccessModal,
		reset,
		getData,
		getWebComponent,
		$$scope,
		slots,
		snt_form_binding
	];
}

class SntForm extends SvelteComponent {
  $$prop_def: SntFormProps;
  $$events_def: SntFormEvents;
  $$slot_def: SntFormSlots;

  $on<K extends keyof SntFormEvents>(type: K, callback: (e: SntFormEvents[K]) => any): () => void {
	  return super.$on(type, callback);
	}

  $set($$props: Partial<SntFormProps>): void {
	  super.$set($$props);
	}

	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			text: 0,
			submitCallBackhandler: 1,
			openErrorModal: 4,
			openSuccessModal: 5,
			reset: 6,
			getData: 7,
			getWebComponent: 8
		});
	}

	
  /** Methods */
 get openErrorModal(): Components.SntForm["openErrorModal"] {
		return this.$$.ctx[4];
	}

	
  /**  */
 get openSuccessModal(): Components.SntForm["openSuccessModal"] {
		return this.$$.ctx[5];
	}

	
  /**  */
 get reset(): Components.SntForm["reset"] {
		return this.$$.ctx[6];
	}

	
  /**  */
 get getData(): Components.SntForm["getData"] {
		return this.$$.ctx[7];
	}

	get getWebComponent(): HTMLSntFormElement | undefined {
		return this.$$.ctx[8];
	}
}

export default SntForm;