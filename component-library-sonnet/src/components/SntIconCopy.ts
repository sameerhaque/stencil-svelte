/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { Components, JSX } from 'component-library';


interface SntIconCopyProps {
  
  /**  */
  titleString?: Components.SntIconCopy["titleString"]
  
  /**  */
  styleClasses?: Components.SntIconCopy["styleClasses"]
  
  /**  */
  propertiesSrc?: Components.SntIconCopy["propertiesSrc"]
  
  /**  */
  properties?: Components.SntIconCopy["properties"]
  
  /**  */
  resizeEl?: Components.SntIconCopy["resizeEl"]
  
  /**  */
  logoIsSet?: Components.SntIconCopy["logoIsSet"]
  
  /**  */
  linkHref?: Components.SntIconCopy["linkHref"]
  
  /**  */
  linkTitle?: Components.SntIconCopy["linkTitle"]
  
  /**  */
  linkTarget?: Components.SntIconCopy["linkTarget"]
  
  /**  */
  linkRel?: Components.SntIconCopy["linkRel"]
  
  /**  */
  linkActionReference?: Components.SntIconCopy["linkActionReference"]
  
  /**  */
  linkActionData?: Components.SntIconCopy["linkActionData"]
  
  /**  */
  linkId?: Components.SntIconCopy["linkId"]
}

interface SntIconCopyEvents {
  
}

interface SntIconCopySlots {
  default: any
}
  
/* generated by Svelte v3.35.0 */
import {
	SvelteComponent,
	binding_callbacks,
	create_slot,
	detach,
	element,
	init,
	insert,
	safe_not_equal,
	set_custom_element_data,
	transition_in,
	transition_out,
	update_slot
} from "svelte/internal";

import { createEventDispatcher, onMount } from "svelte";

function create_fragment(ctx) {
	let snt_icon_copy;
	let current;
	const default_slot_template = /*#slots*/ ctx[18].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[17], null);

	return {
		c() {
			snt_icon_copy = element("snt-icon-copy");
			if (default_slot) default_slot.c();
			set_custom_element_data(snt_icon_copy, "title-string", /*titleString*/ ctx[0]);
			set_custom_element_data(snt_icon_copy, "style-classes", /*styleClasses*/ ctx[1]);
			set_custom_element_data(snt_icon_copy, "properties-src", /*propertiesSrc*/ ctx[2]);
			set_custom_element_data(snt_icon_copy, "properties", /*properties*/ ctx[3]);
			set_custom_element_data(snt_icon_copy, "logo-is-set", /*logoIsSet*/ ctx[4]);
			set_custom_element_data(snt_icon_copy, "link-href", /*linkHref*/ ctx[5]);
			set_custom_element_data(snt_icon_copy, "link-title", /*linkTitle*/ ctx[6]);
			set_custom_element_data(snt_icon_copy, "link-target", /*linkTarget*/ ctx[7]);
			set_custom_element_data(snt_icon_copy, "link-rel", /*linkRel*/ ctx[8]);
			set_custom_element_data(snt_icon_copy, "link-action-reference", /*linkActionReference*/ ctx[9]);
			set_custom_element_data(snt_icon_copy, "link-action-data", /*linkActionData*/ ctx[10]);
			set_custom_element_data(snt_icon_copy, "link-id", /*linkId*/ ctx[11]);
		},
		m(target, anchor) {
			insert(target, snt_icon_copy, anchor);

			if (default_slot) {
				default_slot.m(snt_icon_copy, null);
			}

			/*snt_icon_copy_binding*/ ctx[19](snt_icon_copy);
			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 131072) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[17], dirty, null, null);
				}
			}

			if (!current || dirty & /*titleString*/ 1) {
				set_custom_element_data(snt_icon_copy, "title-string", /*titleString*/ ctx[0]);
			}

			if (!current || dirty & /*styleClasses*/ 2) {
				set_custom_element_data(snt_icon_copy, "style-classes", /*styleClasses*/ ctx[1]);
			}

			if (!current || dirty & /*propertiesSrc*/ 4) {
				set_custom_element_data(snt_icon_copy, "properties-src", /*propertiesSrc*/ ctx[2]);
			}

			if (!current || dirty & /*properties*/ 8) {
				set_custom_element_data(snt_icon_copy, "properties", /*properties*/ ctx[3]);
			}

			if (!current || dirty & /*logoIsSet*/ 16) {
				set_custom_element_data(snt_icon_copy, "logo-is-set", /*logoIsSet*/ ctx[4]);
			}

			if (!current || dirty & /*linkHref*/ 32) {
				set_custom_element_data(snt_icon_copy, "link-href", /*linkHref*/ ctx[5]);
			}

			if (!current || dirty & /*linkTitle*/ 64) {
				set_custom_element_data(snt_icon_copy, "link-title", /*linkTitle*/ ctx[6]);
			}

			if (!current || dirty & /*linkTarget*/ 128) {
				set_custom_element_data(snt_icon_copy, "link-target", /*linkTarget*/ ctx[7]);
			}

			if (!current || dirty & /*linkRel*/ 256) {
				set_custom_element_data(snt_icon_copy, "link-rel", /*linkRel*/ ctx[8]);
			}

			if (!current || dirty & /*linkActionReference*/ 512) {
				set_custom_element_data(snt_icon_copy, "link-action-reference", /*linkActionReference*/ ctx[9]);
			}

			if (!current || dirty & /*linkActionData*/ 1024) {
				set_custom_element_data(snt_icon_copy, "link-action-data", /*linkActionData*/ ctx[10]);
			}

			if (!current || dirty & /*linkId*/ 2048) {
				set_custom_element_data(snt_icon_copy, "link-id", /*linkId*/ ctx[11]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(snt_icon_copy);
			if (default_slot) default_slot.d(detaching);
			/*snt_icon_copy_binding*/ ctx[19](null);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let __ref;
	let __mounted = false;
	const dispatch = createEventDispatcher();
	let { titleString = undefined } = $$props;
	let { styleClasses = undefined } = $$props;
	let { propertiesSrc = undefined } = $$props;
	let { properties = undefined } = $$props;
	let { resizeEl = undefined } = $$props;
	let { logoIsSet = undefined } = $$props;
	let { linkHref = undefined } = $$props;
	let { linkTitle = undefined } = $$props;
	let { linkTarget = undefined } = $$props;
	let { linkRel = undefined } = $$props;
	let { linkActionReference = undefined } = $$props;
	let { linkActionData = undefined } = $$props;
	let { linkId = undefined } = $$props;
	const registerViewport = (...args) => __ref.registerViewport(...args);
	const getWebComponent = () => __ref;

	onMount(() => {
		$$invalidate(16, __mounted = true);
	});

	const setProp = (prop, value) => {
		if (__ref) $$invalidate(12, __ref[prop] = value, __ref);
	};

	const onEvent = e => {
		e.stopPropagation();
		dispatch(e.type, e.detail);
	};

	function snt_icon_copy_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			__ref = $$value;
			$$invalidate(12, __ref);
		});
	}

	$$self.$$set = $$props => {
		if ("titleString" in $$props) $$invalidate(0, titleString = $$props.titleString);
		if ("styleClasses" in $$props) $$invalidate(1, styleClasses = $$props.styleClasses);
		if ("propertiesSrc" in $$props) $$invalidate(2, propertiesSrc = $$props.propertiesSrc);
		if ("properties" in $$props) $$invalidate(3, properties = $$props.properties);
		if ("resizeEl" in $$props) $$invalidate(13, resizeEl = $$props.resizeEl);
		if ("logoIsSet" in $$props) $$invalidate(4, logoIsSet = $$props.logoIsSet);
		if ("linkHref" in $$props) $$invalidate(5, linkHref = $$props.linkHref);
		if ("linkTitle" in $$props) $$invalidate(6, linkTitle = $$props.linkTitle);
		if ("linkTarget" in $$props) $$invalidate(7, linkTarget = $$props.linkTarget);
		if ("linkRel" in $$props) $$invalidate(8, linkRel = $$props.linkRel);
		if ("linkActionReference" in $$props) $$invalidate(9, linkActionReference = $$props.linkActionReference);
		if ("linkActionData" in $$props) $$invalidate(10, linkActionData = $$props.linkActionData);
		if ("linkId" in $$props) $$invalidate(11, linkId = $$props.linkId);
		if ("$$scope" in $$props) $$invalidate(17, $$scope = $$props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*__mounted, resizeEl*/ 73728) {
			$: if (__mounted) setProp("resizeEl", resizeEl);
		}
	};

	return [
		titleString,
		styleClasses,
		propertiesSrc,
		properties,
		logoIsSet,
		linkHref,
		linkTitle,
		linkTarget,
		linkRel,
		linkActionReference,
		linkActionData,
		linkId,
		__ref,
		resizeEl,
		registerViewport,
		getWebComponent,
		__mounted,
		$$scope,
		slots,
		snt_icon_copy_binding
	];
}

class SntIconCopy extends SvelteComponent {
  $$prop_def: SntIconCopyProps;
  $$events_def: SntIconCopyEvents;
  $$slot_def: SntIconCopySlots;

  $on<K extends keyof SntIconCopyEvents>(type: K, callback: (e: SntIconCopyEvents[K]) => any): () => void {
	  return super.$on(type, callback);
	}

  $set($$props: Partial<SntIconCopyProps>): void {
	  super.$set($$props);
	}

	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			titleString: 0,
			styleClasses: 1,
			propertiesSrc: 2,
			properties: 3,
			resizeEl: 13,
			logoIsSet: 4,
			linkHref: 5,
			linkTitle: 6,
			linkTarget: 7,
			linkRel: 8,
			linkActionReference: 9,
			linkActionData: 10,
			linkId: 11,
			registerViewport: 14,
			getWebComponent: 15
		});
	}

	
  /**  */
 get registerViewport(): Components.SntIconCopy["registerViewport"] {
		return this.$$.ctx[14];
	}

	get getWebComponent(): HTMLSntIconCopyElement | undefined {
		return this.$$.ctx[15];
	}
}

export default SntIconCopy;