/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { Components, JSX } from 'component-library';


interface SntTreeviewProps {
  
  /** Public Properties API */
  structure?: Components.SntTreeview["structure"]
}

interface SntTreeviewEvents {
  
  /** Events and Event Emitters */
  sntChange: Parameters<JSX.SntTreeview["onSntChange"]>[0]
}

interface SntTreeviewSlots {
  default: any
}
  
/* generated by Svelte v3.35.0 */
import {
	SvelteComponent,
	binding_callbacks,
	create_slot,
	detach,
	element,
	init,
	insert,
	listen,
	safe_not_equal,
	set_custom_element_data,
	transition_in,
	transition_out,
	update_slot
} from "svelte/internal";

import { createEventDispatcher, onMount } from "svelte";

function create_fragment(ctx) {
	let snt_treeview;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[13].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[12], null);

	return {
		c() {
			snt_treeview = element("snt-treeview");
			if (default_slot) default_slot.c();
			set_custom_element_data(snt_treeview, "structure", /*structure*/ ctx[0]);
		},
		m(target, anchor) {
			insert(target, snt_treeview, anchor);

			if (default_slot) {
				default_slot.m(snt_treeview, null);
			}

			/*snt_treeview_binding*/ ctx[14](snt_treeview);
			current = true;

			if (!mounted) {
				dispose = listen(snt_treeview, "sntChange", /*onEvent*/ ctx[2]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 4096) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[12], dirty, null, null);
				}
			}

			if (!current || dirty & /*structure*/ 1) {
				set_custom_element_data(snt_treeview, "structure", /*structure*/ ctx[0]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(snt_treeview);
			if (default_slot) default_slot.d(detaching);
			/*snt_treeview_binding*/ ctx[14](null);
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let __ref;
	let __mounted = false;
	const dispatch = createEventDispatcher();
	let { structure = undefined } = $$props;
	const getTreeitems = (...args) => __ref.getTreeitems(...args);
	const updateExpandedTreeitems = (...args) => __ref.updateExpandedTreeitems(...args);
	const updateVisibleTreeitems = (...args) => __ref.updateVisibleTreeitems(...args);
	const updateFocusedTreeitems = (...args) => __ref.updateFocusedTreeitems(...args);
	const updateSelectedTreeitems = (...args) => __ref.updateSelectedTreeitems(...args);
	const findNodeByProperty = (...args) => __ref.findNodeByProperty(...args);
	const selectNodeByUrlOrKey = (...args) => __ref.selectNodeByUrlOrKey(...args);
	const updateTreeView = (...args) => __ref.updateTreeView(...args);
	const getWebComponent = () => __ref;

	onMount(() => {
		__mounted = true;
	});

	const setProp = (prop, value) => {
		if (__ref) $$invalidate(1, __ref[prop] = value, __ref);
	};

	const onEvent = e => {
		e.stopPropagation();
		dispatch(e.type, e.detail);
	};

	function snt_treeview_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			__ref = $$value;
			$$invalidate(1, __ref);
		});
	}

	$$self.$$set = $$props => {
		if ("structure" in $$props) $$invalidate(0, structure = $$props.structure);
		if ("$$scope" in $$props) $$invalidate(12, $$scope = $$props.$$scope);
	};

	return [
		structure,
		__ref,
		onEvent,
		getTreeitems,
		updateExpandedTreeitems,
		updateVisibleTreeitems,
		updateFocusedTreeitems,
		updateSelectedTreeitems,
		findNodeByProperty,
		selectNodeByUrlOrKey,
		updateTreeView,
		getWebComponent,
		$$scope,
		slots,
		snt_treeview_binding
	];
}

class SntTreeview extends SvelteComponent {
  $$prop_def: SntTreeviewProps;
  $$events_def: SntTreeviewEvents;
  $$slot_def: SntTreeviewSlots;

  $on<K extends keyof SntTreeviewEvents>(type: K, callback: (e: SntTreeviewEvents[K]) => any): () => void {
	  return super.$on(type, callback);
	}

  $set($$props: Partial<SntTreeviewProps>): void {
	  super.$set($$props);
	}

	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			structure: 0,
			getTreeitems: 3,
			updateExpandedTreeitems: 4,
			updateVisibleTreeitems: 5,
			updateFocusedTreeitems: 6,
			updateSelectedTreeitems: 7,
			findNodeByProperty: 8,
			selectNodeByUrlOrKey: 9,
			updateTreeView: 10,
			getWebComponent: 11
		});
	}

	
  /** Public Methods API */
 get getTreeitems(): Components.SntTreeview["getTreeitems"] {
		return this.$$.ctx[3];
	}

	
  /**  */
 get updateExpandedTreeitems(): Components.SntTreeview["updateExpandedTreeitems"] {
		return this.$$.ctx[4];
	}

	
  /**  */
 get updateVisibleTreeitems(): Components.SntTreeview["updateVisibleTreeitems"] {
		return this.$$.ctx[5];
	}

	
  /**  */
 get updateFocusedTreeitems(): Components.SntTreeview["updateFocusedTreeitems"] {
		return this.$$.ctx[6];
	}

	
  /**  */
 get updateSelectedTreeitems(): Components.SntTreeview["updateSelectedTreeitems"] {
		return this.$$.ctx[7];
	}

	
  /**  */
 get findNodeByProperty(): Components.SntTreeview["findNodeByProperty"] {
		return this.$$.ctx[8];
	}

	
  /**  */
 get selectNodeByUrlOrKey(): Components.SntTreeview["selectNodeByUrlOrKey"] {
		return this.$$.ctx[9];
	}

	
  /**  */
 get updateTreeView(): Components.SntTreeview["updateTreeView"] {
		return this.$$.ctx[10];
	}

	get getWebComponent(): HTMLSntTreeviewElement | undefined {
		return this.$$.ctx[11];
	}
}

export default SntTreeview;