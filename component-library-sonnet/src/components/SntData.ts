/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { Components, JSX } from 'component-library';


interface SntDataProps {
  
  /**  */
  type?: Components.SntData["type"]
  
  /**  */
  lazyLoad?: Components.SntData["lazyLoad"]
  
  /**  */
  src?: Components.SntData["src"]
  
  /**  */
  data?: Components.SntData["data"]
}

interface SntDataEvents {
  
}

interface SntDataSlots {
  default: any
}
  
/* generated by Svelte v3.35.0 */
import {
	SvelteComponent,
	binding_callbacks,
	create_slot,
	detach,
	element,
	init,
	insert,
	safe_not_equal,
	set_custom_element_data,
	transition_in,
	transition_out,
	update_slot
} from "svelte/internal";

import { createEventDispatcher, onMount } from "svelte";

function create_fragment(ctx) {
	let snt_data;
	let snt_data_src_value;
	let current;
	const default_slot_template = /*#slots*/ ctx[8].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[7], null);

	return {
		c() {
			snt_data = element("snt-data");
			if (default_slot) default_slot.c();
			set_custom_element_data(snt_data, "type", /*type*/ ctx[0]);
			set_custom_element_data(snt_data, "lazy-load", /*lazyLoad*/ ctx[1]);
			if (snt_data.src !== (snt_data_src_value = /*src*/ ctx[2])) set_custom_element_data(snt_data, "src", snt_data_src_value);
			set_custom_element_data(snt_data, "data", /*data*/ ctx[3]);
		},
		m(target, anchor) {
			insert(target, snt_data, anchor);

			if (default_slot) {
				default_slot.m(snt_data, null);
			}

			/*snt_data_binding*/ ctx[9](snt_data);
			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 128) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[7], dirty, null, null);
				}
			}

			if (!current || dirty & /*type*/ 1) {
				set_custom_element_data(snt_data, "type", /*type*/ ctx[0]);
			}

			if (!current || dirty & /*lazyLoad*/ 2) {
				set_custom_element_data(snt_data, "lazy-load", /*lazyLoad*/ ctx[1]);
			}

			if (!current || dirty & /*src*/ 4 && snt_data.src !== (snt_data_src_value = /*src*/ ctx[2])) {
				set_custom_element_data(snt_data, "src", snt_data_src_value);
			}

			if (!current || dirty & /*data*/ 8) {
				set_custom_element_data(snt_data, "data", /*data*/ ctx[3]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(snt_data);
			if (default_slot) default_slot.d(detaching);
			/*snt_data_binding*/ ctx[9](null);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let __ref;
	let __mounted = false;
	const dispatch = createEventDispatcher();
	let { type = undefined } = $$props;
	let { lazyLoad = undefined } = $$props;
	let { src = undefined } = $$props;
	let { data = undefined } = $$props;
	const getData = (...args) => __ref.getData(...args);
	const getWebComponent = () => __ref;

	onMount(() => {
		__mounted = true;
	});

	const setProp = (prop, value) => {
		if (__ref) $$invalidate(4, __ref[prop] = value, __ref);
	};

	const onEvent = e => {
		e.stopPropagation();
		dispatch(e.type, e.detail);
	};

	function snt_data_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			__ref = $$value;
			$$invalidate(4, __ref);
		});
	}

	$$self.$$set = $$props => {
		if ("type" in $$props) $$invalidate(0, type = $$props.type);
		if ("lazyLoad" in $$props) $$invalidate(1, lazyLoad = $$props.lazyLoad);
		if ("src" in $$props) $$invalidate(2, src = $$props.src);
		if ("data" in $$props) $$invalidate(3, data = $$props.data);
		if ("$$scope" in $$props) $$invalidate(7, $$scope = $$props.$$scope);
	};

	return [
		type,
		lazyLoad,
		src,
		data,
		__ref,
		getData,
		getWebComponent,
		$$scope,
		slots,
		snt_data_binding
	];
}

class SntData extends SvelteComponent {
  $$prop_def: SntDataProps;
  $$events_def: SntDataEvents;
  $$slot_def: SntDataSlots;

  $on<K extends keyof SntDataEvents>(type: K, callback: (e: SntDataEvents[K]) => any): () => void {
	  return super.$on(type, callback);
	}

  $set($$props: Partial<SntDataProps>): void {
	  super.$set($$props);
	}

	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			type: 0,
			lazyLoad: 1,
			src: 2,
			data: 3,
			getData: 5,
			getWebComponent: 6
		});
	}

	
  /**  */
 get getData(): Components.SntData["getData"] {
		return this.$$.ctx[5];
	}

	get getWebComponent(): HTMLSntDataElement | undefined {
		return this.$$.ctx[6];
	}
}

export default SntData;