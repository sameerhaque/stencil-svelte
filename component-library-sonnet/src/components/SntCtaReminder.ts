/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { Components, JSX } from 'component-library';


interface SntCtaReminderProps {
  
  /**  */
  titleString?: Components.SntCtaReminder["titleString"]
  
  /**  */
  linkTitle?: Components.SntCtaReminder["linkTitle"]
  
  /**  */
  url?: Components.SntCtaReminder["url"]
  
  /**  */
  urlTarget?: Components.SntCtaReminder["urlTarget"]
  
  /**  */
  actionReference?: Components.SntCtaReminder["actionReference"]
  
  /**  */
  actionData?: Components.SntCtaReminder["actionData"]
  
  /**  */
  styleClasses?: Components.SntCtaReminder["styleClasses"]
  
  /**  */
  buttonId?: Components.SntCtaReminder["buttonId"]
}

interface SntCtaReminderEvents {
  
}

interface SntCtaReminderSlots {
  default: any
}
  
/* generated by Svelte v3.35.0 */
import {
	SvelteComponent,
	binding_callbacks,
	create_slot,
	detach,
	element,
	init,
	insert,
	safe_not_equal,
	set_custom_element_data,
	transition_in,
	transition_out,
	update_slot
} from "svelte/internal";

import { createEventDispatcher, onMount } from "svelte";

function create_fragment(ctx) {
	let snt_cta_reminder;
	let current;
	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);

	return {
		c() {
			snt_cta_reminder = element("snt-cta-reminder");
			if (default_slot) default_slot.c();
			set_custom_element_data(snt_cta_reminder, "title-string", /*titleString*/ ctx[0]);
			set_custom_element_data(snt_cta_reminder, "link-title", /*linkTitle*/ ctx[1]);
			set_custom_element_data(snt_cta_reminder, "url", /*url*/ ctx[2]);
			set_custom_element_data(snt_cta_reminder, "url-target", /*urlTarget*/ ctx[3]);
			set_custom_element_data(snt_cta_reminder, "action-reference", /*actionReference*/ ctx[4]);
			set_custom_element_data(snt_cta_reminder, "action-data", /*actionData*/ ctx[5]);
			set_custom_element_data(snt_cta_reminder, "style-classes", /*styleClasses*/ ctx[6]);
			set_custom_element_data(snt_cta_reminder, "button-id", /*buttonId*/ ctx[7]);
		},
		m(target, anchor) {
			insert(target, snt_cta_reminder, anchor);

			if (default_slot) {
				default_slot.m(snt_cta_reminder, null);
			}

			/*snt_cta_reminder_binding*/ ctx[12](snt_cta_reminder);
			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 1024) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[10], dirty, null, null);
				}
			}

			if (!current || dirty & /*titleString*/ 1) {
				set_custom_element_data(snt_cta_reminder, "title-string", /*titleString*/ ctx[0]);
			}

			if (!current || dirty & /*linkTitle*/ 2) {
				set_custom_element_data(snt_cta_reminder, "link-title", /*linkTitle*/ ctx[1]);
			}

			if (!current || dirty & /*url*/ 4) {
				set_custom_element_data(snt_cta_reminder, "url", /*url*/ ctx[2]);
			}

			if (!current || dirty & /*urlTarget*/ 8) {
				set_custom_element_data(snt_cta_reminder, "url-target", /*urlTarget*/ ctx[3]);
			}

			if (!current || dirty & /*actionReference*/ 16) {
				set_custom_element_data(snt_cta_reminder, "action-reference", /*actionReference*/ ctx[4]);
			}

			if (!current || dirty & /*actionData*/ 32) {
				set_custom_element_data(snt_cta_reminder, "action-data", /*actionData*/ ctx[5]);
			}

			if (!current || dirty & /*styleClasses*/ 64) {
				set_custom_element_data(snt_cta_reminder, "style-classes", /*styleClasses*/ ctx[6]);
			}

			if (!current || dirty & /*buttonId*/ 128) {
				set_custom_element_data(snt_cta_reminder, "button-id", /*buttonId*/ ctx[7]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(snt_cta_reminder);
			if (default_slot) default_slot.d(detaching);
			/*snt_cta_reminder_binding*/ ctx[12](null);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let __ref;
	let __mounted = false;
	const dispatch = createEventDispatcher();
	let { titleString = undefined } = $$props;
	let { linkTitle = undefined } = $$props;
	let { url = undefined } = $$props;
	let { urlTarget = undefined } = $$props;
	let { actionReference = undefined } = $$props;
	let { actionData = undefined } = $$props;
	let { styleClasses = undefined } = $$props;
	let { buttonId = undefined } = $$props;
	const getWebComponent = () => __ref;

	onMount(() => {
		__mounted = true;
	});

	const setProp = (prop, value) => {
		if (__ref) $$invalidate(8, __ref[prop] = value, __ref);
	};

	const onEvent = e => {
		e.stopPropagation();
		dispatch(e.type, e.detail);
	};

	function snt_cta_reminder_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			__ref = $$value;
			$$invalidate(8, __ref);
		});
	}

	$$self.$$set = $$props => {
		if ("titleString" in $$props) $$invalidate(0, titleString = $$props.titleString);
		if ("linkTitle" in $$props) $$invalidate(1, linkTitle = $$props.linkTitle);
		if ("url" in $$props) $$invalidate(2, url = $$props.url);
		if ("urlTarget" in $$props) $$invalidate(3, urlTarget = $$props.urlTarget);
		if ("actionReference" in $$props) $$invalidate(4, actionReference = $$props.actionReference);
		if ("actionData" in $$props) $$invalidate(5, actionData = $$props.actionData);
		if ("styleClasses" in $$props) $$invalidate(6, styleClasses = $$props.styleClasses);
		if ("buttonId" in $$props) $$invalidate(7, buttonId = $$props.buttonId);
		if ("$$scope" in $$props) $$invalidate(10, $$scope = $$props.$$scope);
	};

	return [
		titleString,
		linkTitle,
		url,
		urlTarget,
		actionReference,
		actionData,
		styleClasses,
		buttonId,
		__ref,
		getWebComponent,
		$$scope,
		slots,
		snt_cta_reminder_binding
	];
}

class SntCtaReminder extends SvelteComponent {
  $$prop_def: SntCtaReminderProps;
  $$events_def: SntCtaReminderEvents;
  $$slot_def: SntCtaReminderSlots;

  $on<K extends keyof SntCtaReminderEvents>(type: K, callback: (e: SntCtaReminderEvents[K]) => any): () => void {
	  return super.$on(type, callback);
	}

  $set($$props: Partial<SntCtaReminderProps>): void {
	  super.$set($$props);
	}

	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			titleString: 0,
			linkTitle: 1,
			url: 2,
			urlTarget: 3,
			actionReference: 4,
			actionData: 5,
			styleClasses: 6,
			buttonId: 7,
			getWebComponent: 9
		});
	}

	get getWebComponent(): HTMLSntCtaReminderElement | undefined {
		return this.$$.ctx[9];
	}
}

export default SntCtaReminder;