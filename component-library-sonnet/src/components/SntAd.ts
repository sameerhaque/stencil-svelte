/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { Components, JSX } from 'component-library';


interface SntAdProps {
  
  /**  */
  titleString?: Components.SntAd["titleString"]
  
  /**  */
  styleClasses?: Components.SntAd["styleClasses"]
  
  /**  */
  iconSources?: Components.SntAd["iconSources"]
  
  /**  */
  logoSources?: Components.SntAd["logoSources"]
  
  /**  */
  href?: Components.SntAd["href"]
  
  /**  */
  target?: Components.SntAd["target"]
  
  /**  */
  buttonLabel?: Components.SntAd["buttonLabel"]
  
  /**  */
  linkLabel?: Components.SntAd["linkLabel"]
  
  /**  */
  ariaLabel?: Components.SntAd["ariaLabel"]
  
  /**  */
  actionReference?: Components.SntAd["actionReference"]
  
  /**  */
  actionData?: Components.SntAd["actionData"]
}

interface SntAdEvents {
  
}

interface SntAdSlots {
  default: any
}
  
/* generated by Svelte v3.35.0 */
import {
	SvelteComponent,
	binding_callbacks,
	create_slot,
	detach,
	element,
	init,
	insert,
	safe_not_equal,
	set_custom_element_data,
	transition_in,
	transition_out,
	update_slot
} from "svelte/internal";

import { createEventDispatcher, onMount } from "svelte";

function create_fragment(ctx) {
	let snt_ad;
	let current;
	const default_slot_template = /*#slots*/ ctx[14].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[13], null);

	return {
		c() {
			snt_ad = element("snt-ad");
			if (default_slot) default_slot.c();
			set_custom_element_data(snt_ad, "title-string", /*titleString*/ ctx[0]);
			set_custom_element_data(snt_ad, "style-classes", /*styleClasses*/ ctx[1]);
			set_custom_element_data(snt_ad, "icon-sources", /*iconSources*/ ctx[2]);
			set_custom_element_data(snt_ad, "logo-sources", /*logoSources*/ ctx[3]);
			set_custom_element_data(snt_ad, "href", /*href*/ ctx[4]);
			set_custom_element_data(snt_ad, "target", /*target*/ ctx[5]);
			set_custom_element_data(snt_ad, "button-label", /*buttonLabel*/ ctx[6]);
			set_custom_element_data(snt_ad, "link-label", /*linkLabel*/ ctx[7]);
			set_custom_element_data(snt_ad, "aria-label", /*ariaLabel*/ ctx[8]);
			set_custom_element_data(snt_ad, "action-reference", /*actionReference*/ ctx[9]);
			set_custom_element_data(snt_ad, "action-data", /*actionData*/ ctx[10]);
		},
		m(target, anchor) {
			insert(target, snt_ad, anchor);

			if (default_slot) {
				default_slot.m(snt_ad, null);
			}

			/*snt_ad_binding*/ ctx[15](snt_ad);
			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 8192) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[13], dirty, null, null);
				}
			}

			if (!current || dirty & /*titleString*/ 1) {
				set_custom_element_data(snt_ad, "title-string", /*titleString*/ ctx[0]);
			}

			if (!current || dirty & /*styleClasses*/ 2) {
				set_custom_element_data(snt_ad, "style-classes", /*styleClasses*/ ctx[1]);
			}

			if (!current || dirty & /*iconSources*/ 4) {
				set_custom_element_data(snt_ad, "icon-sources", /*iconSources*/ ctx[2]);
			}

			if (!current || dirty & /*logoSources*/ 8) {
				set_custom_element_data(snt_ad, "logo-sources", /*logoSources*/ ctx[3]);
			}

			if (!current || dirty & /*href*/ 16) {
				set_custom_element_data(snt_ad, "href", /*href*/ ctx[4]);
			}

			if (!current || dirty & /*target*/ 32) {
				set_custom_element_data(snt_ad, "target", /*target*/ ctx[5]);
			}

			if (!current || dirty & /*buttonLabel*/ 64) {
				set_custom_element_data(snt_ad, "button-label", /*buttonLabel*/ ctx[6]);
			}

			if (!current || dirty & /*linkLabel*/ 128) {
				set_custom_element_data(snt_ad, "link-label", /*linkLabel*/ ctx[7]);
			}

			if (!current || dirty & /*ariaLabel*/ 256) {
				set_custom_element_data(snt_ad, "aria-label", /*ariaLabel*/ ctx[8]);
			}

			if (!current || dirty & /*actionReference*/ 512) {
				set_custom_element_data(snt_ad, "action-reference", /*actionReference*/ ctx[9]);
			}

			if (!current || dirty & /*actionData*/ 1024) {
				set_custom_element_data(snt_ad, "action-data", /*actionData*/ ctx[10]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(snt_ad);
			if (default_slot) default_slot.d(detaching);
			/*snt_ad_binding*/ ctx[15](null);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let __ref;
	let __mounted = false;
	const dispatch = createEventDispatcher();
	let { titleString = undefined } = $$props;
	let { styleClasses = undefined } = $$props;
	let { iconSources = undefined } = $$props;
	let { logoSources = undefined } = $$props;
	let { href = undefined } = $$props;
	let { target = undefined } = $$props;
	let { buttonLabel = undefined } = $$props;
	let { linkLabel = undefined } = $$props;
	let { ariaLabel = undefined } = $$props;
	let { actionReference = undefined } = $$props;
	let { actionData = undefined } = $$props;
	const getWebComponent = () => __ref;

	onMount(() => {
		__mounted = true;
	});

	const setProp = (prop, value) => {
		if (__ref) $$invalidate(11, __ref[prop] = value, __ref);
	};

	const onEvent = e => {
		e.stopPropagation();
		dispatch(e.type, e.detail);
	};

	function snt_ad_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			__ref = $$value;
			$$invalidate(11, __ref);
		});
	}

	$$self.$$set = $$props => {
		if ("titleString" in $$props) $$invalidate(0, titleString = $$props.titleString);
		if ("styleClasses" in $$props) $$invalidate(1, styleClasses = $$props.styleClasses);
		if ("iconSources" in $$props) $$invalidate(2, iconSources = $$props.iconSources);
		if ("logoSources" in $$props) $$invalidate(3, logoSources = $$props.logoSources);
		if ("href" in $$props) $$invalidate(4, href = $$props.href);
		if ("target" in $$props) $$invalidate(5, target = $$props.target);
		if ("buttonLabel" in $$props) $$invalidate(6, buttonLabel = $$props.buttonLabel);
		if ("linkLabel" in $$props) $$invalidate(7, linkLabel = $$props.linkLabel);
		if ("ariaLabel" in $$props) $$invalidate(8, ariaLabel = $$props.ariaLabel);
		if ("actionReference" in $$props) $$invalidate(9, actionReference = $$props.actionReference);
		if ("actionData" in $$props) $$invalidate(10, actionData = $$props.actionData);
		if ("$$scope" in $$props) $$invalidate(13, $$scope = $$props.$$scope);
	};

	return [
		titleString,
		styleClasses,
		iconSources,
		logoSources,
		href,
		target,
		buttonLabel,
		linkLabel,
		ariaLabel,
		actionReference,
		actionData,
		__ref,
		getWebComponent,
		$$scope,
		slots,
		snt_ad_binding
	];
}

class SntAd extends SvelteComponent {
  $$prop_def: SntAdProps;
  $$events_def: SntAdEvents;
  $$slot_def: SntAdSlots;

  $on<K extends keyof SntAdEvents>(type: K, callback: (e: SntAdEvents[K]) => any): () => void {
	  return super.$on(type, callback);
	}

  $set($$props: Partial<SntAdProps>): void {
	  super.$set($$props);
	}

	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			titleString: 0,
			styleClasses: 1,
			iconSources: 2,
			logoSources: 3,
			href: 4,
			target: 5,
			buttonLabel: 6,
			linkLabel: 7,
			ariaLabel: 8,
			actionReference: 9,
			actionData: 10,
			getWebComponent: 12
		});
	}

	get getWebComponent(): HTMLSntAdElement | undefined {
		return this.$$.ctx[12];
	}
}

export default SntAd;