/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { Components, JSX } from 'component-library';


interface SntNavItemProps {
  
  /**  */
  href?: Components.SntNavItem["href"]
  
  /**  */
  target?: Components.SntNavItem["target"]
  
  /**  */
  linkTitle?: Components.SntNavItem["linkTitle"]
  
  /**  */
  iconClassName?: Components.SntNavItem["iconClassName"]
  
  /**  */
  expanded?: Components.SntNavItem["expanded"]
  
  /**  */
  current?: Components.SntNavItem["current"]
  
  /**  */
  styleClasses?: Components.SntNavItem["styleClasses"]
  
  /**  */
  isExternal?: Components.SntNavItem["isExternal"]
}

interface SntNavItemEvents {
  
  /**  */
  navItemEvent: Parameters<JSX.SntNavItem["onNavItemEvent"]>[0]
}

interface SntNavItemSlots {
  default: any
}
  
/* generated by Svelte v3.35.0 */
import {
	SvelteComponent,
	binding_callbacks,
	create_slot,
	detach,
	element,
	init,
	insert,
	listen,
	safe_not_equal,
	set_custom_element_data,
	transition_in,
	transition_out,
	update_slot
} from "svelte/internal";

import { createEventDispatcher, onMount } from "svelte";

function create_fragment(ctx) {
	let snt_nav_item;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[20].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[19], null);

	return {
		c() {
			snt_nav_item = element("snt-nav-item");
			if (default_slot) default_slot.c();
			set_custom_element_data(snt_nav_item, "href", /*href*/ ctx[0]);
			set_custom_element_data(snt_nav_item, "target", /*target*/ ctx[1]);
			set_custom_element_data(snt_nav_item, "link-title", /*linkTitle*/ ctx[2]);
			set_custom_element_data(snt_nav_item, "icon-class-name", /*iconClassName*/ ctx[3]);
			set_custom_element_data(snt_nav_item, "expanded", /*expanded*/ ctx[4]);
			set_custom_element_data(snt_nav_item, "current", /*current*/ ctx[5]);
			set_custom_element_data(snt_nav_item, "style-classes", /*styleClasses*/ ctx[6]);
			set_custom_element_data(snt_nav_item, "is-external", /*isExternal*/ ctx[7]);
		},
		m(target, anchor) {
			insert(target, snt_nav_item, anchor);

			if (default_slot) {
				default_slot.m(snt_nav_item, null);
			}

			/*snt_nav_item_binding*/ ctx[21](snt_nav_item);
			current = true;

			if (!mounted) {
				dispose = listen(snt_nav_item, "navItemEvent", /*onEvent*/ ctx[9]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 524288) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[19], dirty, null, null);
				}
			}

			if (!current || dirty & /*href*/ 1) {
				set_custom_element_data(snt_nav_item, "href", /*href*/ ctx[0]);
			}

			if (!current || dirty & /*target*/ 2) {
				set_custom_element_data(snt_nav_item, "target", /*target*/ ctx[1]);
			}

			if (!current || dirty & /*linkTitle*/ 4) {
				set_custom_element_data(snt_nav_item, "link-title", /*linkTitle*/ ctx[2]);
			}

			if (!current || dirty & /*iconClassName*/ 8) {
				set_custom_element_data(snt_nav_item, "icon-class-name", /*iconClassName*/ ctx[3]);
			}

			if (!current || dirty & /*expanded*/ 16) {
				set_custom_element_data(snt_nav_item, "expanded", /*expanded*/ ctx[4]);
			}

			if (!current || dirty & /*current*/ 32) {
				set_custom_element_data(snt_nav_item, "current", /*current*/ ctx[5]);
			}

			if (!current || dirty & /*styleClasses*/ 64) {
				set_custom_element_data(snt_nav_item, "style-classes", /*styleClasses*/ ctx[6]);
			}

			if (!current || dirty & /*isExternal*/ 128) {
				set_custom_element_data(snt_nav_item, "is-external", /*isExternal*/ ctx[7]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(snt_nav_item);
			if (default_slot) default_slot.d(detaching);
			/*snt_nav_item_binding*/ ctx[21](null);
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let __ref;
	let __mounted = false;
	const dispatch = createEventDispatcher();
	let { href = undefined } = $$props;
	let { target = undefined } = $$props;
	let { linkTitle = undefined } = $$props;
	let { iconClassName = undefined } = $$props;
	let { expanded = undefined } = $$props;
	let { current = undefined } = $$props;
	let { styleClasses = undefined } = $$props;
	let { isExternal = undefined } = $$props;
	const expand = (...args) => __ref.expand(...args);
	const collapse = (...args) => __ref.collapse(...args);
	const toggleExpanded = (...args) => __ref.toggleExpanded(...args);
	const setCurrent = (...args) => __ref.setCurrent(...args);
	const unsetCurrent = (...args) => __ref.unsetCurrent(...args);
	const toggleCurrent = (...args) => __ref.toggleCurrent(...args);
	const registerParent = (...args) => __ref.registerParent(...args);
	const isType = (...args) => __ref.isType(...args);
	const getWebComponent = () => __ref;

	onMount(() => {
		__mounted = true;
	});

	const setProp = (prop, value) => {
		if (__ref) $$invalidate(8, __ref[prop] = value, __ref);
	};

	const onEvent = e => {
		e.stopPropagation();
		dispatch(e.type, e.detail);
	};

	function snt_nav_item_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			__ref = $$value;
			$$invalidate(8, __ref);
		});
	}

	$$self.$$set = $$props => {
		if ("href" in $$props) $$invalidate(0, href = $$props.href);
		if ("target" in $$props) $$invalidate(1, target = $$props.target);
		if ("linkTitle" in $$props) $$invalidate(2, linkTitle = $$props.linkTitle);
		if ("iconClassName" in $$props) $$invalidate(3, iconClassName = $$props.iconClassName);
		if ("expanded" in $$props) $$invalidate(4, expanded = $$props.expanded);
		if ("current" in $$props) $$invalidate(5, current = $$props.current);
		if ("styleClasses" in $$props) $$invalidate(6, styleClasses = $$props.styleClasses);
		if ("isExternal" in $$props) $$invalidate(7, isExternal = $$props.isExternal);
		if ("$$scope" in $$props) $$invalidate(19, $$scope = $$props.$$scope);
	};

	return [
		href,
		target,
		linkTitle,
		iconClassName,
		expanded,
		current,
		styleClasses,
		isExternal,
		__ref,
		onEvent,
		expand,
		collapse,
		toggleExpanded,
		setCurrent,
		unsetCurrent,
		toggleCurrent,
		registerParent,
		isType,
		getWebComponent,
		$$scope,
		slots,
		snt_nav_item_binding
	];
}

class SntNavItem extends SvelteComponent {
  $$prop_def: SntNavItemProps;
  $$events_def: SntNavItemEvents;
  $$slot_def: SntNavItemSlots;

  $on<K extends keyof SntNavItemEvents>(type: K, callback: (e: SntNavItemEvents[K]) => any): () => void {
	  return super.$on(type, callback);
	}

  $set($$props: Partial<SntNavItemProps>): void {
	  super.$set($$props);
	}

	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			href: 0,
			target: 1,
			linkTitle: 2,
			iconClassName: 3,
			expanded: 4,
			current: 5,
			styleClasses: 6,
			isExternal: 7,
			expand: 10,
			collapse: 11,
			toggleExpanded: 12,
			setCurrent: 13,
			unsetCurrent: 14,
			toggleCurrent: 15,
			registerParent: 16,
			isType: 17,
			getWebComponent: 18
		});
	}

	
  /**  */
 get expand(): Components.SntNavItem["expand"] {
		return this.$$.ctx[10];
	}

	
  /**  */
 get collapse(): Components.SntNavItem["collapse"] {
		return this.$$.ctx[11];
	}

	
  /**  */
 get toggleExpanded(): Components.SntNavItem["toggleExpanded"] {
		return this.$$.ctx[12];
	}

	
  /**  */
 get setCurrent(): Components.SntNavItem["setCurrent"] {
		return this.$$.ctx[13];
	}

	
  /**  */
 get unsetCurrent(): Components.SntNavItem["unsetCurrent"] {
		return this.$$.ctx[14];
	}

	
  /**  */
 get toggleCurrent(): Components.SntNavItem["toggleCurrent"] {
		return this.$$.ctx[15];
	}

	
  /**  */
 get registerParent(): Components.SntNavItem["registerParent"] {
		return this.$$.ctx[16];
	}

	
  /**  */
 get isType(): Components.SntNavItem["isType"] {
		return this.$$.ctx[17];
	}

	get getWebComponent(): HTMLSntNavItemElement | undefined {
		return this.$$.ctx[18];
	}
}

export default SntNavItem;